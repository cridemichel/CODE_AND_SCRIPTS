head	1.2;
access;
symbols;
locks
	demichel:1.2; strict;
comment	@ * @;


1.2
date	97.07.26.09.32.27;	author demichel;	state Exp;
branches;
next	1.1;

1.1
date	97.07.26.09.27.22;	author demichel;	state Exp;
branches;
next	;


desc
@@


1.2
log
@versione iniziale
@
text
@void* getshmem(int nbloc,int size) 
{
key_t key;
int shmid;
void* segptr;
char keycar;
keycar = 64 + nbloc;
/* il processo che usa la memoria condivisa non dovrebbe cambiare la 
directory */ 
key=ftok(".",keycar);
/* crea la risorsa sharedmemory */
if ((shmid[nbloc] = shmget(key,size,IPC_CREAT|IPC_EXCL|0644)) == -1)
  {
   printf("Shared memeory segment exists - try as client\n");
   if ((shmid[nbloc]=shmget(key,size,0) )== -1) 
     { 
       perror("shmget");
       exit(1);
     }
  }
else 
  {printf("Creating new shared memory segment\n");
  }

/* crea un puntatore alla memoria condivisa */
if ((segptr = shmat(shmid, 0, 0))== (char *)-1)
  {
    perror("shmat");
    exit(1);
  }
return segptr;
}

void freeshmem(int nbloc)
{
/* rimuove la risorsa shared memory */
  shmctl(shmid[nbloc], IPC_RMID, 0);
  printf("Shred memory segment marked for deletion\n");
}

@


1.1
log
@Initial revision
@
text
@d33 1
@
