#!/usr/local/bin/python3
#Session.vim is generated by Obsession plugin
#usage: go to the directory where you want to start a session
#or recover a session and type
#> aninst <-s|-sn|--servername NAME> <-S|-sf|--sessioname NAME> <-h> <optional_path>
import os, sys
# per avere i color va installato con pip il modulo ansicolors 
# > pip install ansicolors
#import colors
from colors import color
def print_help():
    print('vproj <-s|-sn|--servername NAME|-sna> <-S|-sf|--sessioname NAME> <-novi|--noviminfo> <-vifn|--viminfofilename NAME> <-h> <optional_path>')
    print('-sna: automatically generate a server name and launch mvim with --servername option')
    print('-sn: provide an optional servername')
    print('-sf: choose a file name for the session file different from the default Session.vim')
    print('-novi: do not load .viminfo file in the dir of session file')
    print('-vifn NAME: set a viminfo custom filename')
    quit()
args=sys.argv
itargs=iter(args)
sfdef='Session.vim'
sf=sfdef
cd=os.getcwd()
DEBUG=True
spath=cd
sn=''
vifn='.viminfo'
localviminfo=True
usevim=False
del(args[0])
snauto = False
for a in itargs:
    if a=='-sna' or a == '--servernameauto':
        snauto = True
    elif a=='-s' or a == '-sn' or a  == '--servername':
        sn=next(itargs)
    elif a == '-S' or a == '-sf' or a == '--sessionname':
        sf=next(itargs)
    elif a == '-h' or a =='--help':
        print_help()
    elif a == '-novi' or a == '--noviminfo':
        localviminfo=False
    elif a == '-vifn' or a == '--viminfofilename':
        vifn=next(itargs)
    elif a =='--vim' or a=='-v':
        usevim=True
    elif a =='--notagbar' or a=='-nt':
        showtb=False
    else:
        spath = a
if usevim==True:
    vims='vim '
else:
    vims='mvim '
spath=spath.strip('\n')
if spath[-1]=='/':
    spath=spath[:-1] #strip '/'
#extract dirname + basename 
bn, en = os.path.split(spath)
spath = spath+'/'
#if servername exists vim automatically creates a new one
if DEBUG:
    print('en=', en, ' bn=', bn)
if snauto:
    sn = en
if spath=='':
    spath=cd
fpsf=spath+sf
if DEBUG:
    print('fpsf=', fpsf)
Sopt=' -S '+sf
#start obession with custom session file name provided via command flag -sf
NSopt=" -c \"Obsession"
if sf != sfdef:
    NSopt = NSopt + ' ' + sf + '\" '
else:
    NSopt = NSopt
NSopt = NSopt + '\" '
if DEBUG:
    print('path=',os.getenv('HOME'))
    print('spath=',os.path.abspath(spath))
    print('vinfo=',vifn)
if vifn == '.viminfo' and os.path.abspath(spath)==os.getenv('HOME'):
    yn=input(color('I will overwrite .viminfo in your home dir, continue (y/N)? ', fg='red'))
    #yn=input('I will overwrite .viminfo in your home dir, continue (y/N)? ')
    if yn != 'y':
        print(color('ok aborting...', fg='green'))
        print('ok aborting...')
        quit()
if localviminfo==True:
    #exop = ' -c \':set viminfo+=n'+os.getcwd()+'/'+vifn+'\''
    exop = ' -i '+os.path.abspath(spath)+'/'+vifn
    if DEBUG:
        print('local viminfo='+os.path.abspath(spath)+'/'+vifn)
else:
    exop = ''
exop=exop+' --cmd "let g:is_a_vproj=1"'
exop=exop + NSopt
exop=exop+' -c redraw '
# set ale lsp root dir for texlab
# this way texlab works, this is a workaround
# since texlab is not provided with a function able
# to properly detect latex project root
alelsp=' --cmd "let g:ale_root={\'texlab\':\''+os.path.abspath(spath)+'/\'}" '
#alelsp=' '
#alebuildir=' --cmd ":let g:ale_c_build_dir_names=[\'bin\',\'build\',\''+os.path.abspath(spath)+'\']" '
#alelsp=''
print('alelsproot='+alelsp)
#exop=exop+alelsp+alebuildir
exop=exop+alelsp
if sn != '':
    vims = vims + '--servername ' + sn
if os.path.exists(fpsf):
    os.chdir(spath)
    if DEBUG:
        print('executing=', vims+Sopt+exop)
    #os.system('mvim '+Sopt+exop)
    os.system(vims+Sopt+exop)
    os.chdir(cd)
else:
    os.chdir(spath)
    if DEBUG:
        print('executing=', vims+exop)
    #os.system('mvim '+exop)
    os.system(vims+exop)
    os.chdir(cd)
