!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ADJUST_LASTCOL	../commSrc/mdsimdep.h	19;"	d
ADJUST_LASTCOL	../commSrc/mdsimdep.h	20;"	d
ADJUST_LASTCOL	../commSrc/mdsimul.h	390;"	d
ADJUST_LASTCOL	ellipsoid.h	19;"	d
ADJUST_LASTCOL	ellipsoid.h	20;"	d
ALL	../commSrc/mdsimul.h	92;"	d
ALLOC_LIST	../commSrc/mdsimdep.h	138;"	d
ALLOC_LIST	../commSrc/mdsimdep.h	140;"	d
ALLOC_LIST	ellipsoid.h	138;"	d
ALLOC_LIST	ellipsoid.h	140;"	d
ATOM_LIMIT	../commSrc/mdsimdep.h	174;"	d
ATOM_LIMIT	ellipsoid.h	174;"	d
Aa	../commSrc/mdsimdep.h	/^  sqrtdr2, Aa, V, DrSqTot, temp_transl;$/;"	v
Aa	ellipsoid.h	/^  sqrtdr2, Aa, V, DrSqTot, temp_transl;$/;"	v
Aalpha	xvautil.h	/^COORD_TYPE *drSq, *dphiSq, *Dr, *Dt, *ddtdrSq, *ddtdphiSq, *Aalpha, *dr4,$/;"	v
AalphaFile	xvautil.h	/^  AalphaFile[128], GselfFile[128], GsGsgaussFile[128], FselfFile[128],$/;"	v
AalphaFlag	xvautil.h	/^  ddtdrFlag = 1, ddtdphiFlag = 1, AalphaFlag = 1, GselfFlag = 1,$/;"	v
AllocCT	../commSrc/mdarray.c	/^void AllocCT(int num, COORD_TYPE **ptr, ...)$/;"	f
AllocCT	../commSrc/mdarrayMIX.c	/^void AllocCT(int num, COORD_TYPE **ptr, ...)$/;"	f
AllocCT	../commSrc/mdarrayMLMC.c	/^void AllocCT(int num, COORD_TYPE **ptr, ...)$/;"	f
AllocCT	../commSrc/mdarray_DPT.c	/^void AllocCT(int num, COORD_TYPE **ptr, ...)$/;"	f
AllocCT	../commSrc/mdarray_PT.c	/^void AllocCT(int num, COORD_TYPE **ptr, ...)$/;"	f
AllocCoord	../commSrc/mdarray.c	/^void AllocCoord(int size, COORD_TYPE** pointer, ...)$/;"	f
AllocCoord	../commSrc/mdarrayMIX.c	/^void AllocCoord(int size, CORTYPE** pointer, ...)$/;"	f
AllocCoord	../commSrc/mdarrayMLMC.c	/^void AllocCoord(int size, CORTYPE** pointer, ...)$/;"	f
AllocCoord	../commSrc/mdarray_DPT.c	/^void AllocCoord(int size, COORD_TYPE** pointer, ...)$/;"	f
AllocCoord	../commSrc/mdarray_PT.c	/^void AllocCoord(int PTM, int size, COORD_TYPE*** pointer, ...)$/;"	f
AllocCoordFrag	../commSrc/mdarray.c	/^void AllocCoordFrag(int size, COORD_TYPE** pointer, ...)$/;"	f
AllocCoordFrag	../commSrc/mdarrayMIX.c	/^void AllocCoordFrag(int size, COORD_TYPE** pointer, ...)$/;"	f
AllocCoordFrag	../commSrc/mdarrayMLMC.c	/^void AllocCoordFrag(int size, COORD_TYPE** pointer, ...)$/;"	f
AllocCoordPoly	../commSrc/mdarray.c	/^void AllocCoordPoly(int size, COORD_TYPE** pointer, ...)$/;"	f
AllocInt	../commSrc/mdarray.c	/^void AllocInt(int num, int **ptr, ...)$/;"	f
AllocInt	../commSrc/mdarrayMIX.c	/^void AllocInt(int num, int **ptr, ...)$/;"	f
AllocInt	../commSrc/mdarrayMLMC.c	/^void AllocInt(int num, int **ptr, ...)$/;"	f
AllocInt	../commSrc/mdarray_DPT.c	/^void AllocInt(int num, int **ptr, ...)$/;"	f
AllocInt	../commSrc/mdarray_PT.c	/^void AllocInt(int num, int **ptr, ...)$/;"	f
AllocMatI	../commSrc/mdarray.c	/^int** AllocMatI(int size1, int size2)$/;"	f
AllocMatI	../commSrc/mdarrayMIX.c	/^int** AllocMatI(int size1, int size2)$/;"	f
AllocMatI	../commSrc/mdarrayMLMC.c	/^int** AllocMatI(int size1, int size2)$/;"	f
AllocMatI	../commSrc/mdarray_DPT.c	/^int** AllocMatI(int size1, int size2)$/;"	f
AllocMatI	../commSrc/mdarray_PT.c	/^int** AllocMatI(int size1, int size2)$/;"	f
AllocMatR	../commSrc/mdarray.c	/^COORD_TYPE** AllocMatR(int size1, int size2)$/;"	f
AllocMatR	../commSrc/mdarrayMIX.c	/^COORD_TYPE** AllocMatR(int size1, int size2)$/;"	f
AllocMatR	../commSrc/mdarrayMLMC.c	/^COORD_TYPE** AllocMatR(int size1, int size2)$/;"	f
AllocMatR	../commSrc/mdarray_DPT.c	/^COORD_TYPE** AllocMatR(int size1, int size2)$/;"	f
AllocMatR	../commSrc/mdarray_PT.c	/^COORD_TYPE** AllocMatR(int size1, int size2)$/;"	f
AllocVecI	../commSrc/mdarray.c	/^int* AllocVecI(int size)$/;"	f
AllocVecI	../commSrc/mdarrayMIX.c	/^int* AllocVecI(int size)$/;"	f
AllocVecI	../commSrc/mdarrayMLMC.c	/^int* AllocVecI(int size)$/;"	f
AllocVecI	../commSrc/mdarray_DPT.c	/^int* AllocVecI(int size)$/;"	f
AllocVecI	../commSrc/mdarray_PT.c	/^int* AllocVecI(int size)$/;"	f
AllocVecR	../commSrc/mdarray.c	/^COORD_TYPE* AllocVecR(int size)$/;"	f
AllocVecR	../commSrc/mdarrayMIX.c	/^COORD_TYPE* AllocVecR(int size)$/;"	f
AllocVecR	../commSrc/mdarrayMLMC.c	/^COORD_TYPE* AllocVecR(int size)$/;"	f
AllocVecR	../commSrc/mdarray_DPT.c	/^COORD_TYPE* AllocVecR(int size)$/;"	f
AllocVecR	../commSrc/mdarray_PT.c	/^COORD_TYPE* AllocVecR(int size)$/;"	f
Allocate	../commSrc/xva2ascii.c	/^void Allocate(int totSize, COORD_TYPE** pointer, ...)$/;"	f
Allocate	xvautil.c	/^void Allocate(int totSize, COORD_TYPE** pointer, ...)$/;"	f
BAK	../commSrc/mdsimul.c	/^unsigned char BAK, STA;       \/* each is a switch (0\/1) which determine $/;"	v
BAK	../commSrc/mdsimul_PT.c	/^unsigned char BAK, STA;       \/* each is a switch (0\/1) which determine $/;"	v
BAKT	../commSrc/mdsimul.c	/^char BAKT;           \/* switch used for tape (analogous to BAK for $/;"	v
BAKT	../commSrc/mdsimul_PT.c	/^char BAKT;           \/* switch used for tape (analogous to BAK for $/;"	v
BAK_FILE_NAME	../commSrc/mdsimul.h	82;"	d
C1File	xvautil.h	/^char velFile[128], psi1File[128], psi2File[128], C1File[128], C2File[128], $/;"	v
C1Flag	xvautil.h	/^int velFlag=1, psi1Flag=1, psi2Flag=1, vhFlag=1, C1Flag=1, C2Flag=1, C3Flag=1,$/;"	v
C1acf	xvautil.h	/^COORD_TYPE *velacf, *psi1acf, *psi2acf, *C1acf, *C2acf, *C3acf, $/;"	v
C2File	xvautil.h	/^char velFile[128], psi1File[128], psi2File[128], C1File[128], C2File[128], $/;"	v
C2Flag	xvautil.h	/^int velFlag=1, psi1Flag=1, psi2Flag=1, vhFlag=1, C1Flag=1, C2Flag=1, C3Flag=1,$/;"	v
C2acf	xvautil.h	/^COORD_TYPE *velacf, *psi1acf, *psi2acf, *C1acf, *C2acf, *C3acf, $/;"	v
C3File	xvautil.h	/^  C3File[128], C4File[128], dphiSqFile[128], drSqFile[128], DtFile[128], $/;"	v
C3Flag	xvautil.h	/^int velFlag=1, psi1Flag=1, psi2Flag=1, vhFlag=1, C1Flag=1, C2Flag=1, C3Flag=1,$/;"	v
C3acf	xvautil.h	/^COORD_TYPE *velacf, *psi1acf, *psi2acf, *C1acf, *C2acf, *C3acf, $/;"	v
C4File	xvautil.h	/^  C3File[128], C4File[128], dphiSqFile[128], drSqFile[128], DtFile[128], $/;"	v
C4Flag	xvautil.h	/^  phiFlag=1, C4Flag=1, dphiSqFlag=1, drSqFlag=1, DtFlag=1, DrFlag=1, $/;"	v
C4acf	xvautil.h	/^  *C4acf, *wtd;$/;"	v
CF	../commSrc/mdsimul.h	87;"	d
CHK_LOG	../commSrc/mdsimul.h	85;"	d
CMreset	../commSrc/mdsimdep.h	/^  int CMreset;$/;"	m	struct:progStatus
CMreset	ellipsoid.h	/^  int CMreset;$/;"	m	struct:progStatus
CONT	../commSrc/mdsimul.h	105;"	d
COORD_TYPE	../commSrc/mdsimul.h	67;"	d
CORTYPE	../commSrc/mdarrayMIX.c	28;"	d	file:
CORTYPE	../commSrc/mdarrayMIX.c	30;"	d	file:
CORTYPE	../commSrc/mdarrayMLMC.c	28;"	d	file:
CT	../commSrc/mdsimul.h	100;"	d
C_T	../commSrc/mdsimdep.h	64;"	d
C_T	ellipsoid.h	64;"	d
Continue	../commSrc/mdinit.c	/^void Continue(void)$/;"	f
Continue	../commSrc/mdinitMLMC.c	/^void Continue(void)$/;"	f
Continue	../commSrc/mdinit_DPT.c	/^void Continue(void)$/;"	f
Continue	../commSrc/mdinit_PT.c	/^void Continue(void)$/;"	f
DECL_LIST	../commSrc/mdsimdep.h	/^COORD_TYPE DECL_LIST;$/;"	v
DECL_LIST	../commSrc/mdsimdep.h	151;"	d
DECL_LIST	../commSrc/mdsimdep.h	153;"	d
DECL_LIST	corutil.c	/^COORD_TYPE DECL_LIST;$/;"	v
DECL_LIST	ellipsoid.h	/^COORD_TYPE DECL_LIST;$/;"	v
DECL_LIST	ellipsoid.h	151;"	d
DECL_LIST	ellipsoid.h	153;"	d
DQ	../commSrc/calcEta.h	/^  Pxy0, Pyz0, Pzx0, Pxytt0, Pyztt0, Pzxtt0, *DQ, *ddtDQ,$/;"	v
DQFile	../commSrc/calcEta.h	/^  DQFile[128], ddtDQFile[128];$/;"	v
DQFlag	../commSrc/calcEta.h	/^int PFlag = 1, EtaFlag = 1, DQFlag = 1, ddtDQFlag = 1, ddtNormFlag = 1,$/;"	v
DQinput	../commSrc/calcEta.h	/^char Pinput[128], DQinput[128], PFile[128], EtaFile[128], $/;"	v
DQtens	../commSrc/mdsimdep.h	/^COORD_TYPE Ptens[3], DQtens[3], $/;"	v
DQtens	ellipsoid.h	/^COORD_TYPE Ptens[3], DQtens[3], $/;"	v
DQtensor	measures.c	/^void DQtensor(void)$/;"	f
DQxy	../commSrc/calcEta.h	/^  *Pxy, *Pyz, *Pzx, *DQxy, *DQyz, *DQzx;$/;"	v
DQxy	../commSrc/mdsimdep.h	/^  COORD_TYPE DQxy;$/;"	m	struct:progStatus
DQxy	ellipsoid.h	/^  COORD_TYPE DQxy;$/;"	m	struct:progStatus
DQxy0	../commSrc/calcEta.h	/^COORD_TYPE *Pacf, *Eta, DQxy0, DQyz0, DQzx0, DQxytt0, DQyztt0, DQzxtt0, $/;"	v
DQxytt0	../commSrc/calcEta.h	/^COORD_TYPE *Pacf, *Eta, DQxy0, DQyz0, DQzx0, DQxytt0, DQyztt0, DQzxtt0, $/;"	v
DQyz	../commSrc/calcEta.h	/^  *Pxy, *Pyz, *Pzx, *DQxy, *DQyz, *DQzx;$/;"	v
DQyz	../commSrc/mdsimdep.h	/^  COORD_TYPE DQyz;$/;"	m	struct:progStatus
DQyz	ellipsoid.h	/^  COORD_TYPE DQyz;$/;"	m	struct:progStatus
DQyz0	../commSrc/calcEta.h	/^COORD_TYPE *Pacf, *Eta, DQxy0, DQyz0, DQzx0, DQxytt0, DQyztt0, DQzxtt0, $/;"	v
DQyztt0	../commSrc/calcEta.h	/^COORD_TYPE *Pacf, *Eta, DQxy0, DQyz0, DQzx0, DQxytt0, DQyztt0, DQzxtt0, $/;"	v
DQzx	../commSrc/calcEta.h	/^  *Pxy, *Pyz, *Pzx, *DQxy, *DQyz, *DQzx;$/;"	v
DQzx	../commSrc/mdsimdep.h	/^  COORD_TYPE DQzx;$/;"	m	struct:progStatus
DQzx	ellipsoid.h	/^  COORD_TYPE DQzx;$/;"	m	struct:progStatus
DQzx0	../commSrc/calcEta.h	/^COORD_TYPE *Pacf, *Eta, DQxy0, DQyz0, DQzx0, DQxytt0, DQyztt0, DQzxtt0, $/;"	v
DQzxtt0	../commSrc/calcEta.h	/^COORD_TYPE *Pacf, *Eta, DQxy0, DQyz0, DQzx0, DQxytt0, DQyztt0, DQzxtt0, $/;"	v
DR	../commSrc/mdsimdep.h	/^  COORD_TYPE DR[MAXPAR][3];$/;"	m	struct:progStatus
DR	ellipsoid.h	/^  COORD_TYPE DR[MAXPAR][3];$/;"	m	struct:progStatus
DeleteCoord	../commSrc/mdarray.c	/^void DeleteCoord(COORD_TYPE **pointer, ...)$/;"	f
DeleteCoord	../commSrc/mdarrayMIX.c	/^void DeleteCoord(COORD_TYPE **pointer, ...)$/;"	f
DeleteCoord	../commSrc/mdarrayMLMC.c	/^void DeleteCoord(COORD_TYPE **pointer, ...)$/;"	f
DeleteCoord	../commSrc/mdarray_DPT.c	/^void DeleteCoord(COORD_TYPE **pointer, ...)$/;"	f
DeleteCoord	../commSrc/mdarray_PT.c	/^void DeleteCoord(COORD_TYPE **pointer, ...)$/;"	f
DeleteEvent	tree.c	/^void DeleteEvent (int id)$/;"	f
Dr	xvautil.h	/^COORD_TYPE *drSq, *dphiSq, *Dr, *Dt, *ddtdrSq, *ddtdphiSq, *Aalpha, *dr4,$/;"	v
DrFile	xvautil.h	/^  DrFile[128], vhFile[128], ddtdrFile[128], ddtdphiFile[128],$/;"	v
DrFlag	xvautil.h	/^  phiFlag=1, C4Flag=1, dphiSqFlag=1, drSqFlag=1, DtFlag=1, DrFlag=1, $/;"	v
DrSq	move.c	/^double DrSq = 0.0; $/;"	v
DrSqTot	../commSrc/mdsimdep.h	/^  sqrtdr2, Aa, V, DrSqTot, temp_transl;$/;"	v
DrSqTot	ellipsoid.h	/^  sqrtdr2, Aa, V, DrSqTot, temp_transl;$/;"	v
Dt	../commSrc/mdsimdep.h	/^  double Dt;$/;"	m	struct:params
Dt	ellipsoid.h	/^  double Dt;$/;"	m	struct:params
Dt	xvautil.h	/^COORD_TYPE *drSq, *dphiSq, *Dr, *Dt, *ddtdrSq, *ddtdphiSq, *Aalpha, *dr4,$/;"	v
DtFile	xvautil.h	/^  C3File[128], C4File[128], dphiSqFile[128], drSqFile[128], DtFile[128], $/;"	v
DtFlag	xvautil.h	/^  phiFlag=1, C4Flag=1, dphiSqFlag=1, drSqFlag=1, DtFlag=1, DrFlag=1, $/;"	v
Dtrans	../commSrc/mdsimdep.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
Dtrans	ellipsoid.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
E	../commSrc/mdsimdep.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
E	ellipsoid.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
ENDSIM	../commSrc/mdsimul.c	/^int ENDSIM = 0;$/;"	v
ENDSIM	../commSrc/mdsimul_PT.c	/^int ENDSIM = 0;$/;"	v
ENmax	../commSrc/mdsimdep.h	/^  double ENmax;$/;"	m	struct:progStatus
ENmax	ellipsoid.h	/^  double ENmax;$/;"	m	struct:progStatus
ENmin	../commSrc/mdsimdep.h	/^  double ENmin;$/;"	m	struct:progStatus
ENmin	ellipsoid.h	/^  double ENmin;$/;"	m	struct:progStatus
EXIT	../commSrc/mdsimul.h	104;"	d
EXT_DLST	../commSrc/mdsimdep.h	/^COORD_TYPE EXT_DLST;$/;"	v
EXT_DLST	../commSrc/mdsimdep.h	156;"	d
EXT_DLST	../commSrc/mdsimdep.h	158;"	d
EXT_DLST	../commSrc/mdsimdep.h	160;"	d
EXT_DLST	../commSrc/mdsimul.h	55;"	d
EXT_DLST	corutil.c	/^COORD_TYPE EXT_DLST;$/;"	v
EXT_DLST	ellipsoid.h	/^COORD_TYPE EXT_DLST;$/;"	v
EXT_DLST	ellipsoid.h	156;"	d
EXT_DLST	ellipsoid.h	158;"	d
EXT_DLST	ellipsoid.h	160;"	d
EXT_SLST	../commSrc/mdsimdep.h	105;"	d
EXT_SLST	../commSrc/mdsimdep.h	107;"	d
EXT_SLST	../commSrc/mdsimdep.h	109;"	d
EXT_SLST	../commSrc/mdsimul.h	56;"	d
EXT_SLST	ellipsoid.h	105;"	d
EXT_SLST	ellipsoid.h	107;"	d
EXT_SLST	ellipsoid.h	109;"	d
ErrExit	tree.c	/^void ErrExit(char *str)$/;"	f
Eta	../commSrc/calcEta.h	/^COORD_TYPE *Pacf, *Eta, DQxy0, DQyz0, DQzx0, DQxytt0, DQyztt0, DQzxtt0, $/;"	v
EtaFile	../commSrc/calcEta.h	/^char Pinput[128], DQinput[128], PFile[128], EtaFile[128], $/;"	v
EtaFlag	../commSrc/calcEta.h	/^int PFlag = 1, EtaFlag = 1, DQFlag = 1, ddtDQFlag = 1, ddtNormFlag = 1,$/;"	v
FCC	init.c	/^void FCC(int Nm, COORD_TYPE *m)$/;"	f
FSKMAX	../commSrc/mdsimdep.h	81;"	d
FSKMAX	ellipsoid.h	81;"	d
FSPOINT	../commSrc/mdsimdep.h	79;"	d
FSPOINT	ellipsoid.h	79;"	d
FreeMatI	../commSrc/mdarray.c	/^void FreeMatI(int** v)$/;"	f
FreeMatI	../commSrc/mdarrayMIX.c	/^void FreeMatI(int** v)$/;"	f
FreeMatI	../commSrc/mdarrayMLMC.c	/^void FreeMatI(int** v)$/;"	f
FreeMatI	../commSrc/mdarray_DPT.c	/^void FreeMatI(int** v)$/;"	f
FreeMatI	../commSrc/mdarray_PT.c	/^void FreeMatI(int** v)$/;"	f
FreeMatR	../commSrc/mdarray.c	/^void FreeMatR(COORD_TYPE** v)$/;"	f
FreeMatR	../commSrc/mdarrayMIX.c	/^void FreeMatR(COORD_TYPE** v)$/;"	f
FreeMatR	../commSrc/mdarrayMLMC.c	/^void FreeMatR(COORD_TYPE** v)$/;"	f
FreeMatR	../commSrc/mdarray_DPT.c	/^void FreeMatR(COORD_TYPE** v)$/;"	f
FreeMatR	../commSrc/mdarray_PT.c	/^void FreeMatR(COORD_TYPE** v)$/;"	f
FreeVecI	../commSrc/mdarray.c	/^void FreeVecI(int* v)$/;"	f
FreeVecI	../commSrc/mdarrayMIX.c	/^void FreeVecI(int* v)$/;"	f
FreeVecI	../commSrc/mdarrayMLMC.c	/^void FreeVecI(int* v)$/;"	f
FreeVecI	../commSrc/mdarray_DPT.c	/^void FreeVecI(int* v)$/;"	f
FreeVecI	../commSrc/mdarray_PT.c	/^void FreeVecI(int* v)$/;"	f
FreeVecR	../commSrc/mdarray.c	/^void FreeVecR(COORD_TYPE* v)$/;"	f
FreeVecR	../commSrc/mdarrayMIX.c	/^void FreeVecR(COORD_TYPE* v)$/;"	f
FreeVecR	../commSrc/mdarrayMLMC.c	/^void FreeVecR(COORD_TYPE* v)$/;"	f
FreeVecR	../commSrc/mdarray_DPT.c	/^void FreeVecR(COORD_TYPE* v)$/;"	f
FreeVecR	../commSrc/mdarray_PT.c	/^void FreeVecR(COORD_TYPE* v)$/;"	f
Fself	xvautil.h	/^  **Gself, **GsGsgauss, *Fself;$/;"	v
FselfFile	xvautil.h	/^  AalphaFile[128], GselfFile[128], GsGsgaussFile[128], FselfFile[128],$/;"	v
FselfFlag	xvautil.h	/^  GsGsgaussFlag = 1, FselfFlag = 1, wtdFlag = 1;$/;"	v
GSPOINT	../commSrc/mdsimdep.h	77;"	d
GSPOINT	ellipsoid.h	77;"	d
GSRMAX	../commSrc/mdsimdep.h	76;"	d
GSRMAX	ellipsoid.h	76;"	d
GsGsgauss	xvautil.h	/^  **Gself, **GsGsgauss, *Fself;$/;"	v
GsGsgaussFile	xvautil.h	/^  AalphaFile[128], GselfFile[128], GsGsgaussFile[128], FselfFile[128],$/;"	v
GsGsgaussFlag	xvautil.h	/^  GsGsgaussFlag = 1, FselfFlag = 1, wtdFlag = 1;$/;"	v
Gself	xvautil.h	/^  **Gself, **GsGsgauss, *Fself;$/;"	v
GselfFile	xvautil.h	/^  AalphaFile[128], GselfFile[128], GsGsgaussFile[128], FselfFile[128],$/;"	v
GselfFlag	xvautil.h	/^  ddtdrFlag = 1, ddtdphiFlag = 1, AalphaFlag = 1, GselfFlag = 1,$/;"	v
Gsnr	xvautil.h	/^int tCor, printEvery, nTeta, tBeg, Gsnr, base, NN, xvaSaveMode = 0; $/;"	v
GsrMax	xvautil.h	/^COORD_TYPE m0, m1, d, Vol, GsrMax, wtdRmax, kMax;$/;"	v
HNBOX	../commSrc/mdsimdep.h	/^  int HNBOX;$/;"	m	struct:progStatus
HNBOX	../commSrc/mdsimdep.h	731;"	d
HNBOX	ellipsoid.h	/^  int HNBOX;$/;"	m	struct:progStatus
HNBOX	ellipsoid.h	731;"	d
INT	../commSrc/mdsimul.h	99;"	d
InitEventList	tree.c	/^void InitEventList (void) $/;"	f
ItensD	../commSrc/mdsimdep.h	/^  press_m, press_at, rcmz, rho, ItensD[2][3];$/;"	v
ItensD	ellipsoid.h	/^  press_m, press_at, rcmz, rho, ItensD[2][3];$/;"	v
JJ	../commSrc/mdsimdep.h	/^  int JJ;$/;"	m	struct:progStatus
JJ	ellipsoid.h	/^  int JJ;$/;"	m	struct:progStatus
K	move.c	/^double W, K, T1xx, T1yy, T1zz,$/;"	v
KBEG	../commSrc/mdsimdep.h	727;"	d
KBEG	ellipsoid.h	727;"	d
KEND	../commSrc/mdsimdep.h	728;"	d
KEND	ellipsoid.h	728;"	d
KK	../commSrc/mdsimdep.h	/^  int KK;$/;"	m	struct:progStatus
KK	ellipsoid.h	/^  int KK;$/;"	m	struct:progStatus
L2	move.c	/^double pi, invL, L2, Vz;   $/;"	v
LLINT	../commSrc/mdsimul.h	101;"	d
LOG	../commSrc/mdsimul.h	91;"	d
Lz2	move.c	/^double Lz2;$/;"	v
M	../commSrc/mdsimdep.h	/^  int M;                        \/* number of cells in each direction $/;"	m	struct:params
M	ellipsoid.h	/^  int M;                        \/* number of cells in each direction $/;"	m	struct:params
MAIN	../commSrc/mdarray.c	1;"	d	file:
MAIN	../commSrc/mdarrayMIX.c	1;"	d	file:
MAIN	../commSrc/mdarrayMLMC.c	1;"	d	file:
MAIN	../commSrc/mdarray_DPT.c	1;"	d	file:
MAIN	../commSrc/mdarray_PT.c	1;"	d	file:
MAIN	../commSrc/mdchoose.c	1;"	d	file:
MAIN	../commSrc/mdchoose_DPT.c	1;"	d	file:
MAIN	../commSrc/mdinit.c	1;"	d	file:
MAIN	../commSrc/mdinitMLMC.c	1;"	d	file:
MAIN	../commSrc/mdinit_DPT.c	1;"	d	file:
MAIN	../commSrc/mdinit_PT.c	1;"	d	file:
MAIN	../commSrc/mdio.c	1;"	d	file:
MAIN	../commSrc/mdio_DPT.c	1;"	d	file:
MAIN	../commSrc/mdsimul.c	14;"	d	file:
MAIN	../commSrc/mdsimul_PT.c	14;"	d	file:
MAIN	../commSrc/mdutil.c	1;"	d	file:
MAXBIN	../commSrc/mdsimdep.h	73;"	d
MAXBIN	ellipsoid.h	73;"	d
MAXDAT	../commSrc/meanc.c	2;"	d	file:
MAXINPS	../commSrc/meanc.c	1;"	d	file:
MAXPAR	../commSrc/mdsimdep.h	68;"	d
MAXPAR	ellipsoid.h	68;"	d
MAXPROCS	../commSrc/mdsimul.h	42;"	d
MAXSEGS	../commSrc/mdsimul.h	78;"	d
MAXSIZE	../commSrc/mdsimul.h	62;"	d
MAXVARS	../commSrc/mdsimul.h	76;"	d
MAX_LENGTH	../commSrc/mdsimul.h	74;"	d
MB	../commSrc/mdsimdep.h	/^int MB[NUMV];$/;"	v
MB	ellipsoid.h	/^int MB[NUMV];$/;"	v
MD2ASCII	../commSrc/md2ascii.c	5;"	d	file:
MD2ASCII	../commSrc/md2ascii_DPT.c	5;"	d	file:
MD2ASCII	../commSrc/md2ascii_PT.c	5;"	d	file:
MD2Fra	../commSrc/xva2ascii.c	/^void MD2Fra(void)$/;"	f
MDINT	../commSrc/mdsimdep.h	45;"	d
MDINT	../commSrc/mdsimdep.h	46;"	d
MDINT	../commSrc/mdsimdep.h	49;"	d
MDINT	../commSrc/mdsimdep.h	50;"	d
MDINT	../commSrc/mdsimul.h	60;"	d
MDINT	ellipsoid.h	45;"	d
MDINT	ellipsoid.h	46;"	d
MDINT	ellipsoid.h	49;"	d
MDINT	ellipsoid.h	50;"	d
MDINTFMT	../commSrc/mdsimdep.h	47;"	d
MDINTFMT	../commSrc/mdsimdep.h	51;"	d
MDINTFMT	ellipsoid.h	47;"	d
MDINTFMT	ellipsoid.h	51;"	d
MDMPIabort	../commSrc/mdinit_DPT.c	/^int MDMPIabort = 0;$/;"	v
MDSIMUL	../commSrc/mdsimdep.h	12;"	d
MDSIMUL	ellipsoid.h	12;"	d
MDS_LOG	../commSrc/mdsimul.h	86;"	d
MD_CORE_BARRIER	../commSrc/mdsimdep.h	/^enum {MD_CORE_BARRIER=0,MD_INOUT_BARRIER,MD_OUTIN_BARRIER,MD_EVENT_NONE};$/;"	e
MD_CORE_BARRIER	ellipsoid.h	/^enum {MD_CORE_BARRIER=0,MD_INOUT_BARRIER,MD_OUTIN_BARRIER,MD_EVENT_NONE};$/;"	e
MD_DEBUG	../commSrc/mdsimdep.h	55;"	d
MD_DEBUG	ellipsoid.h	55;"	d
MD_DEBUG2	../commSrc/mdsimdep.h	56;"	d
MD_DEBUG2	ellipsoid.h	56;"	d
MD_DEBUG3	../commSrc/mdsimdep.h	57;"	d
MD_DEBUG3	ellipsoid.h	57;"	d
MD_DEBUG4	../commSrc/mdsimdep.h	58;"	d
MD_DEBUG4	ellipsoid.h	58;"	d
MD_EVENT_NONE	../commSrc/mdsimdep.h	/^enum {MD_CORE_BARRIER=0,MD_INOUT_BARRIER,MD_OUTIN_BARRIER,MD_EVENT_NONE};$/;"	e
MD_EVENT_NONE	ellipsoid.h	/^enum {MD_CORE_BARRIER=0,MD_INOUT_BARRIER,MD_OUTIN_BARRIER,MD_EVENT_NONE};$/;"	e
MD_HARDSPHERES	../commSrc/mdsimdep.h	10;"	d
MD_HARDSPHERES	ellipsoid.h	10;"	d
MD_HD_MIS	../commSrc/mdsimdep.h	27;"	d
MD_HD_MIS	ellipsoid.h	27;"	d
MD_HD_TMP	../commSrc/mdsimdep.h	24;"	d
MD_HD_TMP	ellipsoid.h	24;"	d
MD_HD_XVA	../commSrc/mdsimdep.h	38;"	d
MD_HD_XVA	ellipsoid.h	38;"	d
MD_HOME	../commSrc/mdsimdep.h	22;"	d
MD_HOME	ellipsoid.h	22;"	d
MD_INOUT_BARRIER	../commSrc/mdsimdep.h	/^enum {MD_CORE_BARRIER=0,MD_INOUT_BARRIER,MD_OUTIN_BARRIER,MD_EVENT_NONE};$/;"	e
MD_INOUT_BARRIER	ellipsoid.h	/^enum {MD_CORE_BARRIER=0,MD_INOUT_BARRIER,MD_OUTIN_BARRIER,MD_EVENT_NONE};$/;"	e
MD_INT	../commSrc/mdsimul.c	317;"	d	file:
MD_INT	../commSrc/mdsimul.c	321;"	d	file:
MD_INTP	../commSrc/mdsimul.c	318;"	d	file:
MD_INTP	../commSrc/mdsimul.c	322;"	d	file:
MD_INTSTR	../commSrc/mdsimul.c	319;"	d	file:
MD_INTSTR	../commSrc/mdsimul.c	323;"	d	file:
MD_MPI_END	../commSrc/mdsimul.h	46;"	d
MD_MPI_EXCHG	../commSrc/mdsimul.h	47;"	d
MD_MPI_PRINT	../commSrc/mdsimul.h	45;"	d
MD_OUTIN_BARRIER	../commSrc/mdsimdep.h	/^enum {MD_CORE_BARRIER=0,MD_INOUT_BARRIER,MD_OUTIN_BARRIER,MD_EVENT_NONE};$/;"	e
MD_OUTIN_BARRIER	ellipsoid.h	/^enum {MD_CORE_BARRIER=0,MD_INOUT_BARRIER,MD_OUTIN_BARRIER,MD_EVENT_NONE};$/;"	e
MD_SIMDAT	../commSrc/mdsimdep.h	23;"	d
MD_SIMDAT	ellipsoid.h	23;"	d
MD_TAPE_MIS	../commSrc/mdsimdep.h	34;"	d
MD_TAPE_MIS	ellipsoid.h	34;"	d
MD_TAPE_TMP	../commSrc/mdsimdep.h	30;"	d
MD_TAPE_TMP	ellipsoid.h	30;"	d
MD_TAPE_XVA	../commSrc/mdsimdep.h	39;"	d
MD_TAPE_XVA	ellipsoid.h	39;"	d
MEMBLOCK	../commSrc/mdsimul.h	54;"	d
MP	../commSrc/xva2ascii.h	1;"	d
MPI_DOUBLE_PRECISION	../commSrc/mdsimul.h	39;"	d
MPI_GC	../commSrc/mdsimul.h	49;"	d
MPI_INTEGER	../commSrc/mdsimul.h	38;"	d
MPI_MSG_LEN	../commSrc/mdsimul.h	44;"	d
MPI_OUT_PROCESS	../commSrc/mdsimul.h	50;"	d
MPIgetchar	../commSrc/mdio.c	/^int MPIgetchar(void)$/;"	f
MPIgetchar	../commSrc/mdio_DPT.c	/^int MPIgetchar(void)$/;"	f
MPIpid	../commSrc/mdsimul.c	/^int MPIpid;$/;"	v
MPIpid	../commSrc/mdsimul_PT.c	/^int MPIpid;$/;"	v
MPIunlink	../commSrc/mdutil.c	/^void MPIunlink(char * stri)$/;"	f
MSG_LEN	../commSrc/mdsimul.h	93;"	d
Mred	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
Mtot	../commSrc/xva2ascii.h	/^COORD_TYPE m, d, Vol, Mtot;$/;"	v
Mtot	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
Mtot	xvautil.h	/^COORD_TYPE Mtot, xvadt, dt, dteta, T; \/* T = temperature *\/$/;"	v
N	../commSrc/mdsimdep.h	/^  int N;$/;"	m	struct:measHead
N	ellipsoid.h	/^  int N;$/;"	m	struct:measHead
NA	../commSrc/mdsimdep.h	66;"	d
NA	ellipsoid.h	66;"	d
NAME_LENGTH	../commSrc/mdsimul.h	72;"	d
NDIM	../commSrc/mdsimdep.h	54;"	d
NDIM	ellipsoid.h	54;"	d
NK	../commSrc/mdsimdep.h	65;"	d
NK	ellipsoid.h	65;"	d
NN	../commSrc/mdsimdep.h	/^  int NN;         \/* Logatithmic block length *\/$/;"	m	struct:progStatus
NN	../commSrc/mdsimdep.h	/^  int NN;$/;"	m	struct:xvaHead
NN	ellipsoid.h	/^  int NN;         \/* Logatithmic block length *\/$/;"	m	struct:progStatus
NN	ellipsoid.h	/^  int NN;$/;"	m	struct:xvaHead
NN	xvautil.h	/^int tCor, printEvery, nTeta, tBeg, Gsnr, base, NN, xvaSaveMode = 0; $/;"	v
NOSYS	../commSrc/mdsimul.h	95;"	d
NUMCALCS	../commSrc/mdsimul.h	/^int NUMCALCS; \/* Before calling a measuring function this variable is set$/;"	v
NUMK	../commSrc/mdsimdep.h	71;"	d
NUMK	ellipsoid.h	71;"	d
NUMK2AV	../commSrc/mdsimdep.h	732;"	d
NUMK2AV	ellipsoid.h	732;"	d
NUMV	../commSrc/mdsimdep.h	75;"	d
NUMV	ellipsoid.h	75;"	d
NUM_MISURE	../commSrc/mdsimdep.h	42;"	d
NUM_MISURE	ellipsoid.h	42;"	d
NUM_PAR	../commSrc/mdsimdep.h	70;"	d
NUM_PAR	ellipsoid.h	70;"	d
Newsimul	../commSrc/mdinit.c	/^void Newsimul (char *argom)$/;"	f
Newsimul	../commSrc/mdinitMLMC.c	/^void Newsimul (char *argom)$/;"	f
Newsimul	../commSrc/mdinit_DPT.c	/^void Newsimul (char *argom)$/;"	f
Newsimul	../commSrc/mdinit_PT.c	/^void Newsimul (char *argom)$/;"	f
NextEvent	tree.c	/^void NextEvent (void) $/;"	f
Nm	../commSrc/calcEta.h	/^int Nm; \/* Number of points for which calculate the time correlation$/;"	v
Nm	../commSrc/xva2ascii.h	/^int Nm; \/* Number of points for which calculate the time correlation$/;"	v
Nm	corutil.c	/^int SEGSIZE, corBool = 0, tBool = 0, ihdr = 1, ohdr = 1, posBool = 0, Nm,$/;"	v
Nm	xvautil.h	/^int Nm; \/* Number of points for which calculate the time correlation$/;"	v
OP	../commSrc/mdsimdep.h	409;"	d
OP	ellipsoid.h	409;"	d
OS	../commSrc/mdsimdep.h	408;"	d
OS	ellipsoid.h	408;"	d
OconvStruct	../commSrc/mdsimdep.h	/^struct convStruct OconvStruct[]=$/;"	v
OconvStruct	ellipsoid.h	/^struct convStruct OconvStruct[]=$/;"	v
OmeasHead	../commSrc/mdsimdep.h	/^struct measHead OmeasHead[NUM_MISURE];$/;"	v
OmeasHead	ellipsoid.h	/^struct measHead OmeasHead[NUM_MISURE];$/;"	v
Omeasure	../commSrc/mdsimdep.h	/^struct measure Omeasure[NUM_MISURE]=$/;"	v
Omeasure	ellipsoid.h	/^struct measure Omeasure[NUM_MISURE]=$/;"	v
OmeasureH	../commSrc/md2ascii_DPT.c	/^struct measHead OmeasureH; \/* measure file header (see mdsimul.h)*\/$/;"	v
OmeasureH	../commSrc/md2ascii_PT.c	/^struct measHead OmeasureH; \/* measure file header (see mdsimul.h)*\/$/;"	v
Oparams	../commSrc/mdsimdep.h	/^struct params Oparams;$/;"	v
Oparams	ellipsoid.h	/^struct params Oparams;$/;"	v
OprogStatus	../commSrc/chkStatus.c	/^struct progStatus OprogStatus;$/;"	v
OprogStatus	../commSrc/mdsimdep.h	/^struct progStatus OprogStatus;$/;"	v
OprogStatus	ellipsoid.h	/^struct progStatus OprogStatus;$/;"	v
OsimStat	../commSrc/mdsimul.c	/^struct simStat OsimStat;	     \/* global istance of sim_status $/;"	v
OsimStat	../commSrc/mdsimul_PT.c	/^struct simStat OsimStat;	     \/* global istance of sim_status $/;"	v
OsinglePar	../commSrc/mdsimdep.h	/^struct singlePar OsinglePar[] = { $/;"	v
OsinglePar	ellipsoid.h	/^struct singlePar OsinglePar[] = { $/;"	v
OxvaH	../commSrc/calcEta.c	/^struct measHead OxvaH; \/* measure file header (see mdsimul.h)*\/$/;"	v
OxvaH	../commSrc/xva2ascii.c	/^struct xvaHead OxvaH; \/* measure file header (see mdsimul.h)*\/$/;"	v
OxvaH	xvautil.c	/^struct xvaHead OxvaH; \/* measure file header (see mdsimul.h)*\/$/;"	v
OxvaHead	../commSrc/mdsimdep.h	/^struct xvaHead OxvaHead;$/;"	v
OxvaHead	ellipsoid.h	/^struct xvaHead OxvaHead;$/;"	v
OxvaPar	../commSrc/calcEta.h	/^struct singlePar OxvaPar[] = { $/;"	v
OxvaPar	../commSrc/xva2ascii.h	/^struct singlePar OxvaPar[] = { $/;"	v
OxvaPar	xvautil.h	/^struct singlePar OxvaPar[] = { $/;"	v
P	../commSrc/mdsimdep.h	/^  COORD_TYPE P;			\/* pressure *\/$/;"	m	struct:params
P	ellipsoid.h	/^  COORD_TYPE P;			\/* pressure *\/$/;"	m	struct:params
PE	../commSrc/mdsimdep.h	/^  int PE[PE_POINTS];$/;"	m	struct:progStatus
PE	ellipsoid.h	/^  int PE[PE_POINTS];$/;"	m	struct:progStatus
PE_POINTS	../commSrc/mdsimdep.h	83;"	d
PE_POINTS	ellipsoid.h	83;"	d
PFile	../commSrc/calcEta.h	/^char Pinput[128], DQinput[128], PFile[128], EtaFile[128], $/;"	v
PFlag	../commSrc/calcEta.h	/^int PFlag = 1, EtaFlag = 1, DQFlag = 1, ddtDQFlag = 1, ddtNormFlag = 1,$/;"	v
PNormFlag	../commSrc/calcEta.h	/^  PNormFlag = 1;$/;"	v
PTM	../commSrc/xva2ascii.h	/^int nRun, PTM;$/;"	v
Pacf	../commSrc/calcEta.h	/^COORD_TYPE *Pacf, *Eta, DQxy0, DQyz0, DQzx0, DQxytt0, DQyztt0, DQzxtt0, $/;"	v
Parsing	../commSrc/mdinit.c	/^void Parsing(char stringA[NAME_LENGTH], char stringB[NAME_LENGTH])$/;"	f
Parsing	../commSrc/mdinitMLMC.c	/^void Parsing(char stringA[NAME_LENGTH], char stringB[NAME_LENGTH])$/;"	f
Parsing	../commSrc/mdinit_DPT.c	/^void Parsing(char stringA[NAME_LENGTH], char stringB[NAME_LENGTH])$/;"	f
Parsing	../commSrc/mdinit_PT.c	/^void Parsing(char stringA[NAME_LENGTH], char stringB[NAME_LENGTH])$/;"	f
Pinput	../commSrc/calcEta.h	/^char Pinput[128], DQinput[128], PFile[128], EtaFile[128], $/;"	v
PredictEvent	move.c	/^void PredictEvent (int na, int nb) $/;"	f
ProcSync0	../commSrc/mdsimul.h	134;"	d
ProcessCellCrossing	move.c	/^void ProcessCellCrossing(void)$/;"	f
ProcessCollWall	move.c	/^void ProcessCollWall(void)$/;"	f
ProcessCollision	move.c	/^void ProcessCollision(void)$/;"	f
Ptens	../commSrc/mdsimdep.h	/^COORD_TYPE Ptens[3], DQtens[3], $/;"	v
Ptens	ellipsoid.h	/^COORD_TYPE Ptens[3], DQtens[3], $/;"	v
Ptensor	measures.c	/^void Ptensor(void)$/;"	f
Pxx	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
Pxy	../commSrc/calcEta.h	/^  *Pxy, *Pyz, *Pzx, *DQxy, *DQyz, *DQzx;$/;"	v
Pxy	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
Pxy0	../commSrc/calcEta.h	/^  Pxy0, Pyz0, Pzx0, Pxytt0, Pyztt0, Pzxtt0, *DQ, *ddtDQ,$/;"	v
PxyArr	../commSrc/mdsimdep.h	/^  COORD_TYPE PxyArr[5];$/;"	m	struct:progStatus
PxyArr	ellipsoid.h	/^  COORD_TYPE PxyArr[5];$/;"	m	struct:progStatus
Pxytt0	../commSrc/calcEta.h	/^  Pxy0, Pyz0, Pzx0, Pxytt0, Pyztt0, Pzxtt0, *DQ, *ddtDQ,$/;"	v
Pyy	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
Pyz	../commSrc/calcEta.h	/^  *Pxy, *Pyz, *Pzx, *DQxy, *DQyz, *DQzx;$/;"	v
Pyz	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
Pyz0	../commSrc/calcEta.h	/^  Pxy0, Pyz0, Pzx0, Pxytt0, Pyztt0, Pzxtt0, *DQ, *ddtDQ,$/;"	v
PyzArr	../commSrc/mdsimdep.h	/^  COORD_TYPE PyzArr[5];$/;"	m	struct:progStatus
PyzArr	ellipsoid.h	/^  COORD_TYPE PyzArr[5];$/;"	m	struct:progStatus
Pyztt0	../commSrc/calcEta.h	/^  Pxy0, Pyz0, Pzx0, Pxytt0, Pyztt0, Pzxtt0, *DQ, *ddtDQ,$/;"	v
Pzx	../commSrc/calcEta.h	/^  *Pxy, *Pyz, *Pzx, *DQxy, *DQyz, *DQzx;$/;"	v
Pzx	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
Pzx0	../commSrc/calcEta.h	/^  Pxy0, Pyz0, Pzx0, Pxytt0, Pyztt0, Pzxtt0, *DQ, *ddtDQ,$/;"	v
PzxArr	../commSrc/mdsimdep.h	/^  COORD_TYPE PzxArr[5];$/;"	m	struct:progStatus
PzxArr	ellipsoid.h	/^  COORD_TYPE PzxArr[5];$/;"	m	struct:progStatus
Pzxtt0	../commSrc/calcEta.h	/^  Pxy0, Pyz0, Pzx0, Pxytt0, Pyztt0, Pzxtt0, *DQ, *ddtDQ,$/;"	v
Pzz	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
RBEG	../commSrc/mdsimdep.h	729;"	d
RBEG	ellipsoid.h	729;"	d
REND	../commSrc/mdsimdep.h	730;"	d
REND	ellipsoid.h	730;"	d
REPLICA	../commSrc/md2ascii_DPT.c	/^int REPLICA, multi = 0, lambda = 0;$/;"	v
REPLICA	../commSrc/md2ascii_PT.c	/^int REPLICA, multi = 0, lambda = 0;$/;"	v
RINT_	../commSrc/mdsimul.h	174;"	d
RXMD_MPI	../commSrc/mdsimul.h	48;"	d
S	../commSrc/mdsimdep.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
S	ellipsoid.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
SAVE_LIST	../commSrc/mdsimdep.h	101;"	d
SAVE_LIST	../commSrc/mdsimdep.h	103;"	d
SAVE_LIST	ellipsoid.h	101;"	d
SAVE_LIST	ellipsoid.h	103;"	d
SEGSIZE	../commSrc/mdsimul.c	/^int SEGSIZE;         \/* arrays dimension in bytes $/;"	v
SEGSIZE	../commSrc/mdsimul_PT.c	/^int SEGSIZE;         \/* arrays dimension in bytes $/;"	v
SEGSIZE	corutil.c	/^int SEGSIZE, corBool = 0, tBool = 0, ihdr = 1, ohdr = 1, posBool = 0, Nm,$/;"	v
SIMUL	init.c	2;"	d	file:
SIMUL	measures.c	2;"	d	file:
SIMUL	move.c	2;"	d	file:
STA	../commSrc/mdsimul.c	/^unsigned char BAK, STA;       \/* each is a switch (0\/1) which determine $/;"	v
STA	../commSrc/mdsimul_PT.c	/^unsigned char BAK, STA;       \/* each is a switch (0\/1) which determine $/;"	v
STATUS_FILE_NAME	../commSrc/mdsimul.h	83;"	d
STD	../commSrc/mdsimul.h	90;"	d
STR	../commSrc/mdsimul.h	98;"	d
ScheduleEvent	tree.c	/^void ScheduleEvent (int idA, int idB, double tEvent) $/;"	f
ScheduleEvent	tree.c	/^void ScheduleEvent(int IdA, int IdB, double tEvent)$/;"	f
ScheduleEventBarr	tree.c	/^void ScheduleEventBarr (int idA, int idB, int idC, double tEvent) $/;"	f
SignR	move.c	3;"	d	file:
Sqr	../commSrc/mdsimul.h	166;"	d
StartRun	init.c	/^  void StartRun(void)$/;"	f
SuspendJob	../commSrc/mdinit.c	/^void SuspendJob(int sigid)$/;"	f
SuspendJob	../commSrc/mdinitMLMC.c	/^void SuspendJob(int sigid)$/;"	f
SuspendJob	../commSrc/mdinit_DPT.c	/^void SuspendJob(int sigid)$/;"	f
SuspendJob	../commSrc/mdinit_PT.c	/^void SuspendJob(int sigid)$/;"	f
T	../commSrc/calcEta.h	/^COORD_TYPE xvadt, dt, T; \/* T = temperature *\/$/;"	v
T	../commSrc/mdsimdep.h	/^  COORD_TYPE T;			\/* temperature *\/$/;"	m	struct:params
T	../commSrc/mdsimdep.h	/^  double T;$/;"	m	struct:measHead
T	../commSrc/mdsimdep.h	/^  double T;$/;"	m	struct:xvaHead
T	corutil.c	/^COORD_TYPE T;$/;"	v
T	ellipsoid.h	/^  COORD_TYPE T;			\/* temperature *\/$/;"	m	struct:params
T	ellipsoid.h	/^  double T;$/;"	m	struct:measHead
T	ellipsoid.h	/^  double T;$/;"	m	struct:xvaHead
T	xvautil.h	/^COORD_TYPE Mtot, xvadt, dt, dteta, T; \/* T = temperature *\/$/;"	v
T1xx	move.c	/^  T1xx, T1yy, T1zz, T1xy, T1yz, T1zx, Wxx, Wyy, Wzz,$/;"	v
T1xx	move.c	/^double W, K, T1xx, T1yy, T1zz,$/;"	v
T1xy	move.c	/^  T1xx, T1yy, T1zz, T1xy, T1yz, T1zx, Wxx, Wyy, Wzz,$/;"	v
T1yy	move.c	/^  T1xx, T1yy, T1zz, T1xy, T1yz, T1zx, Wxx, Wyy, Wzz,$/;"	v
T1yy	move.c	/^double W, K, T1xx, T1yy, T1zz,$/;"	v
T1yz	move.c	/^  T1xx, T1yy, T1zz, T1xy, T1yz, T1zx, Wxx, Wyy, Wzz,$/;"	v
T1zx	move.c	/^  T1xx, T1yy, T1zz, T1xy, T1yz, T1zx, Wxx, Wyy, Wzz,$/;"	v
T1zz	move.c	/^  T1xx, T1yy, T1zz, T1xy, T1yz, T1zx, Wxx, Wyy, Wzz,$/;"	v
T1zz	move.c	/^double W, K, T1xx, T1yy, T1zz,$/;"	v
TXT	measures.c	/^char TXT[MSG_LEN];$/;"	v
TXTA	measures.c	/^char TXTA[10][MSG_LEN];$/;"	v
Temp	../commSrc/xva2ascii.h	/^double Temp[512];$/;"	v
TryOlderFile	../commSrc/mdchoose.c	/^int  TryOlderFile(int bf1, int (*readFunc)(int), $/;"	f
TryOlderFile	../commSrc/mdchoose_DPT.c	/^int  TryOlderFile(int bf1, int (*readFunc)(int), $/;"	f
UPDATE_SYSTEM	../commSrc/mdsimdep.h	16;"	d
UPDATE_SYSTEM	../commSrc/mdsimdep.h	17;"	d
UPDATE_SYSTEM	../commSrc/mdsimul.h	389;"	d
UPDATE_SYSTEM	ellipsoid.h	16;"	d
UPDATE_SYSTEM	ellipsoid.h	17;"	d
UpdateAtom	move.c	/^void UpdateAtom(int i)$/;"	f
UpdateSystem	move.c	/^void UpdateSystem(void)$/;"	f
V	../commSrc/mdsimdep.h	/^  sqrtdr2, Aa, V, DrSqTot, temp_transl;$/;"	v
V	ellipsoid.h	/^  sqrtdr2, Aa, V, DrSqTot, temp_transl;$/;"	v
VBEG	../commSrc/mdsimdep.h	725;"	d
VBEG	ellipsoid.h	725;"	d
VEND	../commSrc/mdsimdep.h	726;"	d
VEND	ellipsoid.h	726;"	d
Vol	../commSrc/calcEta.h	/^COORD_TYPE Vol;$/;"	v
Vol	../commSrc/md2ascii.c	/^COORD_TYPE Vol = -1.0;$/;"	v
Vol	../commSrc/md2ascii_DPT.c	/^COORD_TYPE Vol = 1000.0;$/;"	v
Vol	../commSrc/md2ascii_PT.c	/^COORD_TYPE Vol = 1000.0;$/;"	v
Vol	../commSrc/mdsimdep.h	/^  double Vol;$/;"	m	struct:measHead
Vol	../commSrc/mdsimdep.h	/^  double Vol;$/;"	m	struct:xvaHead
Vol	../commSrc/xva2ascii.h	/^COORD_TYPE m, d, Vol, Mtot;$/;"	v
Vol	ellipsoid.h	/^  double Vol;$/;"	m	struct:measHead
Vol	ellipsoid.h	/^  double Vol;$/;"	m	struct:xvaHead
Vol	xvautil.h	/^COORD_TYPE m0, m1, d, Vol, GsrMax, wtdRmax, kMax;$/;"	v
Vz	move.c	/^double pi, invL, L2, Vz;   $/;"	v
W	../commSrc/mdsimdep.h	/^  COORD_TYPE W;$/;"	m	struct:progStatus
W	ellipsoid.h	/^  COORD_TYPE W;$/;"	m	struct:progStatus
W	move.c	/^double W, K, T1xx, T1yy, T1zz,$/;"	v
Wxx	move.c	/^  T1xx, T1yy, T1zz, T1xy, T1yz, T1zx, Wxx, Wyy, Wzz,$/;"	v
Wxy	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
Wyy	move.c	/^  T1xx, T1yy, T1zz, T1xy, T1yz, T1zx, Wxx, Wyy, Wzz,$/;"	v
Wyz	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
Wzx	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
Wzz	move.c	/^  T1xx, T1yy, T1zz, T1xy, T1yz, T1zx, Wxx, Wyy, Wzz,$/;"	v
XTERM	../commSrc/mdsimdep.h	15;"	d
XTERM	ellipsoid.h	15;"	d
XVA_ALST	../commSrc/mdsimdep.h	121;"	d
XVA_ALST	../commSrc/mdsimdep.h	124;"	d
XVA_ALST	ellipsoid.h	121;"	d
XVA_ALST	ellipsoid.h	124;"	d
XVA_DLST	../commSrc/mdsimdep.h	122;"	d
XVA_DLST	../commSrc/mdsimdep.h	125;"	d
XVA_DLST	../commSrc/xva2ascii.c	/^COORD_TYPE XVA_DLST;$/;"	v
XVA_DLST	ellipsoid.h	122;"	d
XVA_DLST	ellipsoid.h	125;"	d
XVA_DLST	xvautil.c	/^COORD_TYPE XVA_DLST;$/;"	v
XVA_LIST	../commSrc/mdsimdep.h	113;"	d
XVA_LIST	../commSrc/mdsimdep.h	116;"	d
XVA_LIST	ellipsoid.h	113;"	d
XVA_LIST	ellipsoid.h	116;"	d
XVA_NUM	../commSrc/mdsimdep.h	114;"	d
XVA_NUM	../commSrc/mdsimdep.h	117;"	d
XVA_NUM	ellipsoid.h	114;"	d
XVA_NUM	ellipsoid.h	117;"	d
_mdPrintf	../commSrc/mdio.c	/^void _mdPrintf(int mode, char *text)$/;"	f
_mdPrintf	../commSrc/mdio_DPT.c	/^void _mdPrintf(int mode, char *text)$/;"	f
_printing	../commSrc/mdio.c	/^void _printing(void)$/;"	f
_printing	../commSrc/mdio_DPT.c	/^void _printing(void)$/;"	f
a	../commSrc/mdsimdep.h	/^  double a[2];$/;"	m	struct:params
a	ellipsoid.h	/^  double a[2];$/;"	m	struct:params
absMisHD	../commSrc/mdutil.c	/^char* absMisHD(const char* fileSrc)$/;"	f
absMisTape	../commSrc/mdutil.c	/^char* absMisTape(const char* fileSrc)$/;"	f
absTmpAsciiHD	../commSrc/mdutil.c	/^char* absTmpAsciiHD(const char* fileSrc)$/;"	f
absTmpHD	../commSrc/mdutil.c	/^char* absTmpHD(const char* fileSrc)$/;"	f
absTmpTape	../commSrc/mdutil.c	/^char* absTmpTape(const char* fileSrc)$/;"	f
absXvaHD	../commSrc/mdutil.c	/^char* absXvaHD(const char* fileSrc)$/;"	f
absXvaTape	../commSrc/mdutil.c	/^char* absXvaTape(const char* fileSrc)$/;"	f
accV	../commSrc/mdsimdep.h	/^  double accV;$/;"	m	struct:progStatus
accV	ellipsoid.h	/^  double accV;$/;"	m	struct:progStatus
accrcmz	../commSrc/mdsimdep.h	/^  double accrcmz;$/;"	m	struct:progStatus
accrcmz	ellipsoid.h	/^  double accrcmz;$/;"	m	struct:progStatus
aclose	../commSrc/calcEta.c	/^void aclose(FILE* ofs)$/;"	f
aclose	../commSrc/xva2ascii.c	/^void aclose(FILE* ofs)$/;"	f
aclose	xvautil.c	/^void aclose(FILE* ofs)$/;"	f
add_bond	move.c	/^void add_bond(int na, int n)$/;"	f
allocCor	../commSrc/scalProc.c	/^void allocCor(int size, COORD_TYPE** pointer, ...)$/;"	f
allocCor	../commSrc/scalProc_PT.c	/^void allocCor(int size, COORD_TYPE** pointer, ...)$/;"	f
alpha	../commSrc/mdsimul.h	22;"	d
aopen	../commSrc/calcEta.c	/^FILE* aopen(char *fileName)$/;"	f
aopen	../commSrc/xva2ascii.c	/^FILE* aopen(char *fileName)$/;"	f
aopen	xvautil.c	/^FILE* aopen(char *fileName)$/;"	f
appSw	../commSrc/mdutil.c	/^char* appSw(char* srcStr, const unsigned char which)$/;"	f
args	../commSrc/calcEta.c	/^void args(int argc,char **argv)$/;"	f
args	../commSrc/md2ascii.c	/^void args(int argc,char **argv)$/;"	f
args	../commSrc/md2ascii_DPT.c	/^void args(int argc,char **argv)$/;"	f
args	../commSrc/md2ascii_PT.c	/^void args(int argc,char **argv)$/;"	f
args	../commSrc/meanc.c	/^void args(int argc, char* argv[])$/;"	f
args	../commSrc/scalProc.c	/^void args(int argc,char **argv)$/;"	f
args	../commSrc/scalProc_PT.c	/^void args(int argc,char **argv)$/;"	f
args	../commSrc/xva2ascii.c	/^void args(int argc,char **argv)$/;"	f
args	xvautil.c	/^void args(int argc,char **argv)$/;"	f
argsMd	../commSrc/mdinit.c	/^int argsMd(int argc, char** argv)  $/;"	f
argsMd	../commSrc/mdinitMLMC.c	/^int argsMd(int argc, char** argv)  $/;"	f
argsMd	../commSrc/mdinit_DPT.c	/^int argsMd(int argc, char** argv)  $/;"	f
argsMd	../commSrc/mdinit_PT.c	/^int argsMd(int argc, char** argv)  $/;"	f
args_b2c	../commSrc/bak2cor.c	/^void args_b2c(int argc,char **argv)$/;"	f
asciiParsing	../commSrc/mdarray.c	/^void asciiParsing(struct pascii strutt[], $/;"	f
asciiParsing	../commSrc/mdarrayMIX.c	/^void asciiParsing(struct pascii strutt[], $/;"	f
asciiParsing	../commSrc/mdarrayMLMC.c	/^void asciiParsing(struct pascii strutt[], $/;"	f
asciiParsing	../commSrc/mdarray_DPT.c	/^void asciiParsing(struct pascii strutt[], $/;"	f
asciiParsing	../commSrc/mdarray_PT.c	/^void asciiParsing(struct pascii strutt[], $/;"	f
atomTime	init.c	/^  double *atomTime, *treeTime;$/;"	v
atomTime	move.c	/^double *treetime, *atomTime;$/;"	v
avngMB	../commSrc/mdsimdep.h	/^  int avngMB;$/;"	m	struct:progStatus
avngMB	ellipsoid.h	/^  int avngMB;$/;"	m	struct:progStatus
avngPress	../commSrc/mdsimdep.h	/^  int avngPress;$/;"	m	struct:progStatus
avngPress	ellipsoid.h	/^  int avngPress;$/;"	m	struct:progStatus
avngS	../commSrc/mdsimdep.h	/^  int avngS;$/;"	m	struct:progStatus
avngS	ellipsoid.h	/^  int avngS;$/;"	m	struct:progStatus
avngTemp	../commSrc/mdsimdep.h	/^  int avngTemp;$/;"	m	struct:progStatus
avngTemp	ellipsoid.h	/^  int avngTemp;$/;"	m	struct:progStatus
avnggr	../commSrc/mdsimdep.h	/^  int avnggr;$/;"	m	struct:progStatus
avnggr	ellipsoid.h	/^  int avnggr;$/;"	m	struct:progStatus
b	../commSrc/mdsimdep.h	/^  double b[2];$/;"	m	struct:params
b	ellipsoid.h	/^  double b[2];$/;"	m	struct:params
bakList	../commSrc/mdinit.c	/^char bakList[512][NAME_LENGTH];$/;"	v
bakList	../commSrc/mdinit_DPT.c	/^char bakList[MAX_M][NAME_LENGTH];$/;"	v
bakSaveMode	../commSrc/mdsimdep.h	/^  int bakSaveMode;\/* save mode for ascii backup *\/$/;"	m	struct:progStatus
bakSaveMode	ellipsoid.h	/^  int bakSaveMode;\/* save mode for ascii backup *\/$/;"	m	struct:progStatus
bakSteps	../commSrc/mdsimdep.h	/^  MDINT bakSteps;    \/* steps between two savings of restore files on HD*\/$/;"	m	struct:progStatus
bakSteps	ellipsoid.h	/^  MDINT bakSteps;    \/* steps between two savings of restore files on HD*\/$/;"	m	struct:progStatus
bakStepsAscii	../commSrc/mdsimdep.h	/^  MDINT bakStepsAscii; $/;"	m	struct:progStatus
bakStepsAscii	ellipsoid.h	/^  MDINT bakStepsAscii; $/;"	m	struct:progStatus
bakTimes	../commSrc/mdsimul.c	/^int bakTimes = 0, measureTimes = 0, xvaTimes = 0;$/;"	v
bakTimes	../commSrc/mdsimul_PT.c	/^int bakTimes = 0, measureTimes = 0, xvaTimes = 0;$/;"	v
base	../commSrc/mdsimdep.h	/^  double base;    \/* We save at base^^NN step *\/$/;"	m	struct:progStatus
base	../commSrc/mdsimdep.h	/^  double base;$/;"	m	struct:xvaHead
base	ellipsoid.h	/^  double base;    \/* We save at base^^NN step *\/$/;"	m	struct:progStatus
base	ellipsoid.h	/^  double base;$/;"	m	struct:xvaHead
base	xvautil.h	/^int tCor, printEvery, nTeta, tBeg, Gsnr, base, NN, xvaSaveMode = 0; $/;"	v
basew	../commSrc/mdsimdep.h	/^  double basew;$/;"	m	struct:progStatus
basew	ellipsoid.h	/^  double basew;$/;"	m	struct:progStatus
bheight	../commSrc/mdsimdep.h	/^  double bheight;$/;"	m	struct:params
bheight	ellipsoid.h	/^  double bheight;$/;"	m	struct:params
bilog_arr	../commSrc/mdsimul.c	/^int *bilog_arr;$/;"	v
bilog_arr	../commSrc/mdsimul.c	/^long long int *bilog_arr;$/;"	v
bilog_step	../commSrc/mdsimul.c	/^inline MD_INT bilog_step(double fstpsw, double fstps)$/;"	f
block_length	../commSrc/mdsimul.h	/^  int block_length;$/;"	m	struct:pascii
bondhist	move.c	/^int bondhist[3]={0,0,0};$/;"	v
bonds	init.c	/^int *bondscache, *numbonds, **bonds, *numbonds0, **bonds0;$/;"	v
bonds0	init.c	/^int *bondscache, *numbonds, **bonds, *numbonds0, **bonds0;$/;"	v
bondscache	init.c	/^int *bondscache, *numbonds, **bonds, *numbonds0, **bonds0;$/;"	v
bool	../commSrc/mdsimul.h	/^typedef unsigned char bool;$/;"	t
bound	move.c	/^int bound(int na, int n)$/;"	f
boxcmBool	corutil.c	/^  boxcmBool = 0;$/;"	v
brownian	../commSrc/mdsimdep.h	/^  int brownian;$/;"	m	struct:progStatus
brownian	ellipsoid.h	/^  int brownian;$/;"	m	struct:progStatus
buf	../commSrc/mdsimul.h	/^  void* buf;             \/* pointer to the buffer *\/$/;"	m	struct:measure
build_bilog_arr	../commSrc/mdsimul.c	/^void build_bilog_arr(void)$/;"	f
bump	move.c	/^void bump (int i, int j, double* W)$/;"	f
bump	move.c	/^void bump (int i, int j, double* W, int bt)$/;"	f
c	../commSrc/mdsimdep.h	/^  double c[2];$/;"	m	struct:params
c	ellipsoid.h	/^  double c[2];$/;"	m	struct:params
calc	../commSrc/mdarray.c	/^void calc(void)$/;"	f
calc	../commSrc/mdarrayMIX.c	/^void calc(void)$/;"	f
calc	../commSrc/mdarrayMLMC.c	/^void calc(void)$/;"	f
calc	../commSrc/mdarray_DPT.c	/^void calc(void)$/;"	f
calc	../commSrc/mdarray_PT.c	/^void calc(void)$/;"	f
calcAngVel	xvautil.c	/^void calcAngVel(COORD_TYPE* ox, COORD_TYPE* oy, COORD_TYPE *oz)$/;"	f
calcCM	xvautil.c	/^void calcCM(COORD_TYPE* rCMx, COORD_TYPE* rCMy, COORD_TYPE* rCMz)$/;"	f
calcCMVel	xvautil.c	/^void calcCMVel(COORD_TYPE *vxCM, COORD_TYPE *vyCM, COORD_TYPE *vzCM)$/;"	f
calcFunc	../commSrc/mdsimul.h	/^  void (*calcFunc)(void);\/* function that performs calculation of measure *\/$/;"	m	struct:measure
calcKVz	move.c	/^void calcKVz(void)$/;"	f
calcObserv	move.c	/^void calcObserv(void)$/;"	f
calcOrientVect	xvautil.c	/^void calcOrientVect(COORD_TYPE* u01x, COORD_TYPE* u01y, COORD_TYPE *u01z)$/;"	f
calcRho	move.c	/^void calcRho(void)$/;"	f
calcV	measures.c	/^void calcV(void)$/;"	f
calccmz	move.c	/^void calccmz(void)$/;"	f
calcpotene	measures.c	/^double calcpotene(void)$/;"	f
cbrt	../commSrc/mdsimul.h	34;"	d
cellList	init.c	/^  int **tree, *inCell[3], *cellList, cellsx, cellsy, cellsz, cellRange[2*NDIM];$/;"	v
cellList	move.c	/^int *inCell[3], **tree, *cellList, cellRange[2*NDIM], $/;"	v
cellRange	init.c	/^  int **tree, *inCell[3], *cellList, cellsx, cellsy, cellsz, cellRange[2*NDIM];$/;"	v
cellRange	move.c	/^int *inCell[3], **tree, *cellList, cellRange[2*NDIM], $/;"	v
cellsx	init.c	/^  int **tree, *inCell[3], *cellList, cellsx, cellsy, cellsz, cellRange[2*NDIM];$/;"	v
cellsx	move.c	/^  cellsx, cellsy, cellsz, initUcellx, initUcelly, initUcellz;$/;"	v
cellsy	init.c	/^  int **tree, *inCell[3], *cellList, cellsx, cellsy, cellsz, cellRange[2*NDIM];$/;"	v
cellsy	move.c	/^  cellsx, cellsy, cellsz, initUcellx, initUcelly, initUcellz;$/;"	v
cellsz	init.c	/^  int **tree, *inCell[3], *cellList, cellsx, cellsy, cellsz, cellRange[2*NDIM];$/;"	v
cellsz	move.c	/^  cellsx, cellsy, cellsz, initUcellx, initUcelly, initUcellz;$/;"	v
check	move.c	/^void check (int *overlap, double *K, double *V)$/;"	f
check_node	tree.c	/^int check_node(char* str, int id, int idNew, int idUp)$/;"	f
checkquenchTime	../commSrc/mdsimdep.h	/^  double checkquenchTime;$/;"	m	struct:progStatus
checkquenchTime	ellipsoid.h	/^  double checkquenchTime;$/;"	m	struct:progStatus
checkz	move.c	/^int checkz(char *msg)$/;"	f
chkBakAsciiSteps	../commSrc/mdutil.c	/^int chkBakAsciiSteps(void)$/;"	f
chkEnd	../commSrc/chkStatus.c	/^void chkEnd(void)$/;"	f
chkStr	../commSrc/mdsimul.h	/^struct chkStr$/;"	s
chkXvaSteps	../commSrc/mdutil.c	/^int chkXvaSteps(void)$/;"	f
chkout	../commSrc/chkStatus.c	/^FILE *chkout, *output;$/;"	v
chooseMeasure	../commSrc/mdchoose.c	/^void chooseMeasure(char* absFile, int (*readFunc)(int))  \/* file -> absolute *\/$/;"	f
chooseMeasure	../commSrc/mdchoose_DPT.c	/^void chooseMeasure(char* absFile, int (*readFunc)(int))  \/* file -> absolute *\/$/;"	f
chooseRestore	../commSrc/mdchoose.c	/^int chooseRestore(char* absFile, unsigned char* PbakSwitch, $/;"	f
chooseRestore	../commSrc/mdchoose_DPT.c	/^int chooseRestore(char* absFile, unsigned char* PbakSwitch, $/;"	f
chooseStatus	../commSrc/mdchoose.c	/^void chooseStatus(char* absFile, int (*readFunc)(int))$/;"	f
chooseStatus	../commSrc/mdchoose_DPT.c	/^void chooseStatus(char* absFile, int (*readFunc)(int))$/;"	f
closeMeasFile	../commSrc/calcEta.c	/^void closeMeasFile(int fd)$/;"	f
closeMeasFile	xvautil.c	/^void closeMeasFile(int fd)$/;"	f
collCount	../commSrc/mdsimdep.h	/^  int collCount;$/;"	m	struct:progStatus
collCount	ellipsoid.h	/^  int collCount;$/;"	m	struct:progStatus
commMD	../commSrc/mdsimul.c	/^void commMD(void)$/;"	f
commMD	../commSrc/mdsimul_PT.c	/^void commMD(void)$/;"	f
compare_int	../commSrc/mdsimul.c	/^int compare_int(const void *a, const void *b)$/;"	f
comvel	init.c	/^void comvel (int Nm, COORD_TYPE temp, COORD_TYPE *m, int resetCM)$/;"	f
comvel_brown	init.c	/^void comvel_brown (COORD_TYPE temp, COORD_TYPE *m)$/;"	f
convStruct	../commSrc/mdsimul.h	/^struct convStruct $/;"	s
converter	../commSrc/mdsimul.h	/^  void (*converter)(FILE* afs, int step, int size);  $/;"	m	struct:convStruct
converter	../commSrc/mdsimul.h	/^  void (*converter)(FILE* afs, long long int step, int size);  $/;"	m	struct:convStruct
copy	../commSrc/mdutil.c	/^int copy(char *src, char* dest) \/* src and dest must be absolute *\/$/;"	f
corBool	corutil.c	/^int SEGSIZE, corBool = 0, tBool = 0, ihdr = 1, ohdr = 1, posBool = 0, Nm,$/;"	v
corList	../commSrc/mdinit.c	/^char corList[512][NAME_LENGTH];$/;"	v
corList	../commSrc/mdinit_DPT.c	/^char corList[MAX_M][NAME_LENGTH];$/;"	v
corrini0	init.c	/^double corrini3, corrini0, corrini1, corrini2, corrnorm;$/;"	v
corrini1	init.c	/^double corrini3, corrini0, corrini1, corrini2, corrnorm;$/;"	v
corrini2	init.c	/^double corrini3, corrini0, corrini1, corrini2, corrnorm;$/;"	v
corrini3	init.c	/^double corrini3, corrini0, corrini1, corrini2, corrnorm;$/;"	v
corrnorm	init.c	/^double corrini3, corrini0, corrini1, corrini2, corrnorm;$/;"	v
creat	../commSrc/mdio.c	77;"	d	file:
creatMPI	../commSrc/mdio.c	/^int creatMPI(char* fn, int how)$/;"	f
creatMPI	../commSrc/mdio_DPT.c	/^int creatMPI(char* fn, int how)$/;"	f
creatMPI_Tord	../commSrc/mdio_DPT.c	/^int creatMPI_Tord(char* fn, int how)$/;"	f
creatWithHead	../commSrc/mdio.c	/^int creatWithHead(char* fileName, char* when, char* errMsg, int mode,$/;"	f
creatWithHead	../commSrc/mdio_DPT.c	/^int creatWithHead(char* fileName, char* when, char* errMsg, int mode,$/;"	f
crossCount	../commSrc/mdsimdep.h	/^  int crossCount;$/;"	m	struct:progStatus
crossCount	ellipsoid.h	/^  int crossCount;$/;"	m	struct:progStatus
curStep	../commSrc/mdsimdep.h	/^  MDINT curStep;	\/* current step of simulation *\/$/;"	m	struct:params
curStep	../commSrc/mdsimul.h	/^  int curStep;$/;"	m	struct:chkStr
curStep	../commSrc/mdsimul.h	/^  long long int curStep;	\/* current simulation step *\/$/;"	m	struct:simStat
curStep	ellipsoid.h	/^  MDINT curStep;	\/* current step of simulation *\/$/;"	m	struct:params
d	../commSrc/xva2ascii.h	/^COORD_TYPE m, d, Vol, Mtot;$/;"	v
d	xvautil.h	/^COORD_TYPE m0, m1, d, Vol, GsrMax, wtdRmax, kMax;$/;"	v
dataFiles	../commSrc/mdsimdep.h	/^  char dataFiles[NUM_MISURE][NAME_LENGTH];$/;"	m	struct:progStatus
dataFiles	ellipsoid.h	/^  char dataFiles[NUM_MISURE][NAME_LENGTH];$/;"	m	struct:progStatus
ddtDQ	../commSrc/calcEta.h	/^  Pxy0, Pyz0, Pzx0, Pxytt0, Pyztt0, Pzxtt0, *DQ, *ddtDQ,$/;"	v
ddtDQFile	../commSrc/calcEta.h	/^  DQFile[128], ddtDQFile[128];$/;"	v
ddtDQFlag	../commSrc/calcEta.h	/^int PFlag = 1, EtaFlag = 1, DQFlag = 1, ddtDQFlag = 1, ddtNormFlag = 1,$/;"	v
ddtNormFlag	../commSrc/calcEta.h	/^int PFlag = 1, EtaFlag = 1, DQFlag = 1, ddtDQFlag = 1, ddtNormFlag = 1,$/;"	v
ddtdphiFile	xvautil.h	/^  DrFile[128], vhFile[128], ddtdrFile[128], ddtdphiFile[128],$/;"	v
ddtdphiFlag	xvautil.h	/^  ddtdrFlag = 1, ddtdphiFlag = 1, AalphaFlag = 1, GselfFlag = 1,$/;"	v
ddtdphiSq	xvautil.h	/^COORD_TYPE *drSq, *dphiSq, *Dr, *Dt, *ddtdrSq, *ddtdphiSq, *Aalpha, *dr4,$/;"	v
ddtdrFile	xvautil.h	/^  DrFile[128], vhFile[128], ddtdrFile[128], ddtdphiFile[128],$/;"	v
ddtdrFlag	xvautil.h	/^  ddtdrFlag = 1, ddtdphiFlag = 1, AalphaFlag = 1, GselfFlag = 1,$/;"	v
ddtdrSq	xvautil.h	/^COORD_TYPE *drSq, *dphiSq, *Dr, *Dt, *ddtdrSq, *ddtdphiSq, *Aalpha, *dr4,$/;"	v
defaults	../commSrc/calcEta.c	/^void defaults(void)$/;"	f
defaults	../commSrc/xva2ascii.c	/^void defaults(void)$/;"	f
defaults	xvautil.c	/^void defaults(void)$/;"	f
delDoubleHD	../commSrc/mdutil.c	/^void delDoubleHD(char *fileName)$/;"	f
delDoubleTape	../commSrc/mdutil.c	/^void delDoubleTape(char *fileName)$/;"	f
delTmpHD	../commSrc/mdutil.c	/^void delTmpHD(char* relName)$/;"	f
delTmpTape	../commSrc/mdutil.c	/^void delTmpTape(char* relName)$/;"	f
delta	../commSrc/mdsimdep.h	/^  double delta[2][2]; \/* ampiezza della buca *\/$/;"	m	struct:params
delta	ellipsoid.h	/^  double delta[2][2]; \/* ampiezza della buca *\/$/;"	m	struct:params
distanza	move.c	/^void distanza(int ia, int ib)$/;"	f
docellcross	move.c	/^void docellcross(int k, double velk, double *rkptr, int cellsk)$/;"	f
doubleBufBak	../commSrc/mdarray.c	/^void doubleBufBak(unsigned char* hdWhich, unsigned char* tapeWhich,$/;"	f
doubleBufBak	../commSrc/mdarrayMIX.c	/^void doubleBufBak(unsigned char* hdWhich, unsigned char* tapeWhich,$/;"	f
doubleBufBak	../commSrc/mdarrayMLMC.c	/^void doubleBufBak(unsigned char* hdWhich, unsigned char* tapeWhich,$/;"	f
doubleBufBak	../commSrc/mdarray_DPT.c	/^void doubleBufBak(unsigned char* hdWhich, unsigned char* tapeWhich,$/;"	f
doubleBufBak	../commSrc/mdarray_PT.c	/^void doubleBufBak(unsigned char* hdWhich, unsigned char* tapeWhich,$/;"	f
doubleBufStatus	../commSrc/mdarray.c	/^void doubleBufStatus()$/;"	f
doubleBufStatus	../commSrc/mdarrayMIX.c	/^void doubleBufStatus()$/;"	f
doubleBufStatus	../commSrc/mdarrayMLMC.c	/^void doubleBufStatus()$/;"	f
doubleBufStatus	../commSrc/mdarray_DPT.c	/^void doubleBufStatus()$/;"	f
doubleBufStatus	../commSrc/mdarray_PT.c	/^void doubleBufStatus()$/;"	f
doubleSaveMeasure	../commSrc/mdarray.c	/^void doubleSaveMeasure(int PN, int misNum, int* times, $/;"	f
doubleSaveMeasure	../commSrc/mdarrayMIX.c	/^void doubleSaveMeasure(int PN, int misNum, int* times, $/;"	f
doubleSaveMeasure	../commSrc/mdarrayMLMC.c	/^void doubleSaveMeasure(int PN, int misNum, int* times, $/;"	f
doubleSaveMeasure	../commSrc/mdarray_DPT.c	/^void doubleSaveMeasure(int PN, int misNum, int* times, $/;"	f
doubleSaveMeasure	../commSrc/mdarray_PT.c	/^void doubleSaveMeasure(int PN, int misNum, int* times, $/;"	f
dphiSq	xvautil.h	/^COORD_TYPE *drSq, *dphiSq, *Dr, *Dt, *ddtdrSq, *ddtdphiSq, *Aalpha, *dr4,$/;"	v
dphiSqFile	xvautil.h	/^  C3File[128], C4File[128], dphiSqFile[128], drSqFile[128], DtFile[128], $/;"	v
dphiSqFlag	xvautil.h	/^  phiFlag=1, C4Flag=1, dphiSqFlag=1, drSqFlag=1, DtFlag=1, DrFlag=1, $/;"	v
dr4	xvautil.h	/^COORD_TYPE *drSq, *dphiSq, *Dr, *Dt, *ddtdrSq, *ddtdphiSq, *Aalpha, *dr4,$/;"	v
drSq	xvautil.h	/^COORD_TYPE *drSq, *dphiSq, *Dr, *Dt, *ddtdrSq, *ddtdphiSq, *Aalpha, *dr4,$/;"	v
drSqFile	xvautil.h	/^  C3File[128], C4File[128], dphiSqFile[128], drSqFile[128], DtFile[128], $/;"	v
drSqFlag	xvautil.h	/^  phiFlag=1, C4Flag=1, dphiSqFlag=1, drSqFlag=1, DtFlag=1, DrFlag=1, $/;"	v
dt	../commSrc/calcEta.h	/^COORD_TYPE xvadt, dt, T; \/* T = temperature *\/$/;"	v
dt	../commSrc/mdsimdep.h	/^  double dt;     \/* dt of each steps *\/$/;"	m	struct:xvaHead
dt	../commSrc/mdsimdep.h	/^  double dt;$/;"	m	struct:measHead
dt	ellipsoid.h	/^  double dt;     \/* dt of each steps *\/$/;"	m	struct:xvaHead
dt	ellipsoid.h	/^  double dt;$/;"	m	struct:measHead
dt	xvautil.h	/^COORD_TYPE Mtot, xvadt, dt, dteta, T; \/* T = temperature *\/$/;"	v
dteta	xvautil.h	/^COORD_TYPE Mtot, xvadt, dt, dteta, T; \/* T = temperature *\/$/;"	v
dummy	../commSrc/mdsimdep.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
dummy	ellipsoid.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
endFormat	../commSrc/mdsimdep.h	/^  int endFormat; \/* 0 = binary 1 = ascii 2 = both *\/$/;"	m	struct:progStatus
endFormat	ellipsoid.h	/^  int endFormat; \/* 0 = binary 1 = ascii 2 = both *\/$/;"	m	struct:progStatus
endJob	../commSrc/mdinit.c	/^void endJob(int ec, void* arg)$/;"	f
endJob	../commSrc/mdinit.c	/^void endJob(void)$/;"	f
endJob	../commSrc/mdinitMLMC.c	/^void endJob(int ec, void* arg)$/;"	f
endJob	../commSrc/mdinit_DPT.c	/^void endJob(int ec, void* arg)$/;"	f
endJob	../commSrc/mdinit_DPT.c	/^void endJob(void)$/;"	f
endJob	../commSrc/mdinit_PT.c	/^void endJob(int ec, void* arg)$/;"	f
endfile	../commSrc/mdsimdep.h	/^  char endfile[NAME_LENGTH];$/;"	m	struct:progStatus
endfile	ellipsoid.h	/^  char endfile[NAME_LENGTH];$/;"	m	struct:progStatus
endtime	../commSrc/mdsimdep.h	/^  double endtime;$/;"	m	struct:progStatus
endtime	ellipsoid.h	/^  double endtime;$/;"	m	struct:progStatus
energy	measures.c	/^void energy(void)$/;"	f
eqlevel	../commSrc/mdsimdep.h	/^  double eqlevel;$/;"	m	struct:progStatus
eqlevel	ellipsoid.h	/^  double eqlevel;$/;"	m	struct:progStatus
equilibrat	../commSrc/mdsimdep.h	/^  int equilibrat;               \/* != 0 if equilibrating *\/$/;"	m	struct:params
equilibrat	ellipsoid.h	/^  int equilibrat;               \/* != 0 if equilibrating *\/$/;"	m	struct:params
equilibrated	../commSrc/mdsimdep.h	/^  int equilibrated;$/;"	m	struct:progStatus
equilibrated	../commSrc/mdsimul.c	/^int *equilibrated;$/;"	v
equilibrated	ellipsoid.h	/^  int equilibrated;$/;"	m	struct:progStatus
eta	../commSrc/mdsimdep.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
eta	ellipsoid.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
evIdA	move.c	/^int evIdA, evIdB, parnumB, parnumA;$/;"	v
evIdB	move.c	/^int evIdA, evIdB, parnumB, parnumA;$/;"	v
evIdC	move.c	/^int evIdC;$/;"	v
eventCount	../commSrc/mdsimdep.h	/^  int eventCount;$/;"	m	struct:progStatus
eventCount	ellipsoid.h	/^  int eventCount;$/;"	m	struct:progStatus
eventMult	../commSrc/mdsimdep.h	/^  int eventMult;$/;"	m	struct:progStatus
eventMult	ellipsoid.h	/^  int eventMult;$/;"	m	struct:progStatus
existDir	../commSrc/mdio.c	/^void existDir(char* dirName)$/;"	f
existDir	../commSrc/mdio_DPT.c	/^void existDir(char* dirName)$/;"	f
expandFact	../commSrc/mdsimdep.h	/^  double expandFact;$/;"	m	struct:progStatus
expandFact	ellipsoid.h	/^  double expandFact;$/;"	m	struct:progStatus
extraLz	../commSrc/mdsimdep.h	/^  double extraLz;$/;"	m	struct:progStatus
extraLz	ellipsoid.h	/^  double extraLz;$/;"	m	struct:progStatus
fileExists	../commSrc/mdio.c	/^int fileExists(struct dirent* d, const char* fn)$/;"	f
fileExists	../commSrc/mdio_DPT.c	/^int fileExists(struct dirent* d, const char* fn)$/;"	f
fileLista	../commSrc/xva2ascii.h	/^char fileLista[NAME_LENGTH],$/;"	v
filename	../commSrc/xva2ascii.c	/^char filename[10000][512];$/;"	v
fopenMPI	../commSrc/mdio.c	/^FILE* fopenMPI(char* fn, char* how)$/;"	f
fopenMPI	../commSrc/mdio_DPT.c	/^FILE* fopenMPI(char* fn, char* how)$/;"	f
fstps	../commSrc/mdsimdep.h	/^  double fstps;         \/* There are KK block each base^NN long *\/$/;"	m	struct:progStatus
fstps	ellipsoid.h	/^  double fstps;         \/* There are KK block each base^NN long *\/$/;"	m	struct:progStatus
g2	init.c	/^double mgA, mgB, g2;$/;"	v
gauss	init.c	/^COORD_TYPE gauss(void)$/;"	f
genFiles	../commSrc/xva2ascii.c	/^void genFiles(int fd, int Nm, int i)$/;"	f
getPhi	xvautil.c	/^void getPhi(COORD_TYPE* fix, COORD_TYPE* fiy, COORD_TYPE* fiz)$/;"	f
get_temps	../commSrc/xva2ascii.c	/^void get_temps(void)$/;"	f
get_tt0	xvautil.c	/^int get_tt0(int t0, int t)$/;"	f
getseed	../commSrc/mdinit.c	/^void getseed(char* argom)$/;"	f
ggrav	../commSrc/mdsimdep.h	/^  double ggrav;$/;"	m	struct:params
ggrav	ellipsoid.h	/^  double ggrav;$/;"	m	struct:params
gr	../commSrc/mdsimdep.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
gr	ellipsoid.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
help	../commSrc/scalProc.c	/^void help(void)$/;"	f
help	../commSrc/scalProc_PT.c	/^void help(void)$/;"	f
help_b2c	../commSrc/bak2cor.c	/^void help_b2c(void)$/;"	f
hist	../commSrc/mdsimdep.h	/^  int hist[MAXBIN];$/;"	m	struct:progStatus
hist	ellipsoid.h	/^  int hist[MAXBIN];$/;"	m	struct:progStatus
histMB	../commSrc/mdsimdep.h	/^  int histMB[NUMV];$/;"	m	struct:progStatus
histMB	ellipsoid.h	/^  int histMB[NUMV];$/;"	m	struct:progStatus
i_	../commSrc/mdsimul.h	/^int* i_;  $/;"	v
ihdr	corutil.c	/^int SEGSIZE, corBool = 0, tBool = 0, ihdr = 1, ohdr = 1, posBool = 0, Nm,$/;"	v
inCell	init.c	/^  int **tree, *inCell[3], *cellList, cellsx, cellsy, cellsz, cellRange[2*NDIM];$/;"	v
inCell	move.c	/^int *inCell[3], **tree, *cellList, cellRange[2*NDIM], $/;"	v
info	corutil.c	/^void info(void)$/;"	f
infoBool	corutil.c	/^int infoBool = 0;$/;"	v
iniBakFile	../commSrc/mdinit.c	/^char iniBakFile[NAME_LENGTH];$/;"	v
iniBakFile	../commSrc/mdinitMLMC.c	/^char iniBakFile[NAME_LENGTH];$/;"	v
iniBakFile	../commSrc/mdinit_DPT.c	/^char iniBakFile[NAME_LENGTH];$/;"	v
iniBakFile	../commSrc/mdinit_PT.c	/^char iniBakFile[NAME_LENGTH];$/;"	v
iniBakFormat	../commSrc/mdinit.c	/^int iniCorFormat = 0, iniBakFormat = 0; \/* 0 = binary 1 = ascii *\/$/;"	v
iniBakFormat	../commSrc/mdinitMLMC.c	/^int iniCorFormat = 0, iniBakFormat = 0; \/* 0 = binary 1 = ascii *\/$/;"	v
iniBakFormat	../commSrc/mdinit_DPT.c	/^int iniCorFormat = 0, iniBakFormat = 0; \/* 0 = binary 1 = ascii *\/$/;"	v
iniBakFormat	../commSrc/mdinit_PT.c	/^int iniCorFormat = 0, iniBakFormat = 0; \/* 0 = binary 1 = ascii *\/$/;"	v
iniBakListFile	../commSrc/mdinit.c	/^char iniBakListFile[NAME_LENGTH];$/;"	v
iniBakListFile	../commSrc/mdinit_DPT.c	/^char iniBakListFile[NAME_LENGTH];$/;"	v
iniCorFormat	../commSrc/mdinit.c	/^int iniCorFormat = 0, iniBakFormat = 0; \/* 0 = binary 1 = ascii *\/$/;"	v
iniCorFormat	../commSrc/mdinitMLMC.c	/^int iniCorFormat = 0, iniBakFormat = 0; \/* 0 = binary 1 = ascii *\/$/;"	v
iniCorFormat	../commSrc/mdinit_DPT.c	/^int iniCorFormat = 0, iniBakFormat = 0; \/* 0 = binary 1 = ascii *\/$/;"	v
iniCorFormat	../commSrc/mdinit_PT.c	/^int iniCorFormat = 0, iniBakFormat = 0; \/* 0 = binary 1 = ascii *\/$/;"	v
iniFormat	../commSrc/mdsimdep.h	/^  int iniFormat; \/* 0 = binary 1 = ascii 2 = both *\/$/;"	m	struct:progStatus
iniFormat	ellipsoid.h	/^  int iniFormat; \/* 0 = binary 1 = ascii 2 = both *\/$/;"	m	struct:progStatus
inifile	../commSrc/mdsimdep.h	/^  char inifile[NAME_LENGTH];$/;"	m	struct:progStatus
inifile	ellipsoid.h	/^  char inifile[NAME_LENGTH];$/;"	m	struct:progStatus
initBefore	../commSrc/mdinit.c	/^void initBefore(void)$/;"	f
initBefore	../commSrc/mdinitMLMC.c	/^void initBefore(void)$/;"	f
initBefore	../commSrc/mdinit_DPT.c	/^void initBefore(void)$/;"	f
initBefore	../commSrc/mdinit_PT.c	/^void initBefore(void)$/;"	f
initCalc	../commSrc/mdsimdep.h	/^  MDINT initCalc[NUM_MISURE];$/;"	m	struct:progStatus
initCalc	ellipsoid.h	/^  MDINT initCalc[NUM_MISURE];$/;"	m	struct:progStatus
initCoord	init.c	/^void initCoord(void)$/;"	f
initStep	../commSrc/mdsimdep.h	/^  MDINT initStep[NUM_MISURE]; $/;"	m	struct:progStatus
initStep	ellipsoid.h	/^  MDINT initStep[NUM_MISURE]; $/;"	m	struct:progStatus
initUcellx	move.c	/^  cellsx, cellsy, cellsz, initUcellx, initUcelly, initUcellz;$/;"	v
initUcelly	move.c	/^  cellsx, cellsy, cellsz, initUcellx, initUcelly, initUcellz;$/;"	v
initUcellz	move.c	/^  cellsx, cellsy, cellsz, initUcellx, initUcelly, initUcellz;$/;"	v
inputFile	../commSrc/bak2cor.c	/^char inputFile[NAME_LENGTH];$/;"	v
inputFile	../commSrc/cor2cor.c	/^char inputFile[NAME_LENGTH];$/;"	v
inputFile	../commSrc/md2ascii.c	/^char inputFile[NAME_LENGTH];\/* input file (measures file) *\/$/;"	v
inputFile	../commSrc/md2ascii_DPT.c	/^char inputFile[NAME_LENGTH];\/* input file (measures file) *\/$/;"	v
inputFile	../commSrc/md2ascii_PT.c	/^char inputFile[NAME_LENGTH];\/* input file (measures file) *\/$/;"	v
inputFile	../commSrc/xva2ascii.h	/^  inputFile[NAME_LENGTH], xvaparsFile[NAME_LENGTH];$/;"	v
inputFile	corutil.c	/^char inputFile[NAME_LENGTH];\/* input file (measures file) *\/$/;"	v
inputFile	xvautil.h	/^char inputFile[NAME_LENGTH], xvaparsFile[NAME_LENGTH];$/;"	v
inputFiles	../commSrc/meanc.c	/^char inputFiles[MAXINPS][512];$/;"	v
intervalSum	../commSrc/mdsimdep.h	/^  double intervalSum;$/;"	m	struct:progStatus
intervalSum	ellipsoid.h	/^  double intervalSum;$/;"	m	struct:progStatus
invL	move.c	/^double pi, invL, L2, Vz;   $/;"	v
invalArg	../commSrc/calcEta.c	/^void invalArg(void)$/;"	f
invalArg	../commSrc/md2ascii.c	/^void invalArg(void)$/;"	f
invalArg	../commSrc/md2ascii_DPT.c	/^void invalArg(void)$/;"	f
invalArg	../commSrc/md2ascii_PT.c	/^void invalArg(void)$/;"	f
invalArg	../commSrc/scalProc.c	/^void invalArg(void)$/;"	f
invalArg	../commSrc/scalProc_PT.c	/^void invalArg(void)$/;"	f
invalArg	../commSrc/xva2ascii.c	/^void invalArg(void)$/;"	f
invalArg	xvautil.c	/^void invalArg(void)$/;"	f
invalArg_b2c	../commSrc/bak2cor.c	/^void invalArg_b2c(void)$/;"	f
invalidArg	../commSrc/meanc.c	/^void invalidArg(void)$/;"	f
invmA	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
invmB	move.c	/^  Wxy, Wyz, Wzx, Pxx, Pyy, Pzz, Pxy, Pyz, Pzx, Mtot, Mred[2][2], invmA, invmB;$/;"	v
invs	../commSrc/mdsimdep.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
invs	ellipsoid.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
ipart	../commSrc/mdsimdep.h	/^  int ipart;$/;"	m	struct:progStatus
ipart	ellipsoid.h	/^  int ipart;$/;"	m	struct:progStatus
kMax	xvautil.h	/^COORD_TYPE m0, m1, d, Vol, GsrMax, wtdRmax, kMax;$/;"	v
lambda	../commSrc/md2ascii_DPT.c	/^int REPLICA, multi = 0, lambda = 0;$/;"	v
lambda	../commSrc/md2ascii_PT.c	/^int REPLICA, multi = 0, lambda = 0;$/;"	v
lastV	../commSrc/mdsimdep.h	/^  double lastV;$/;"	m	struct:progStatus
lastV	ellipsoid.h	/^  double lastV;$/;"	m	struct:progStatus
lastbilogsaved	../commSrc/mdsimdep.h	/^  int lastbilogsaved;$/;"	m	struct:progStatus
lastbilogsaved	ellipsoid.h	/^  int lastbilogsaved;$/;"	m	struct:progStatus
lastbreak1	init.c	/^double *lastbreak1, *lastbreak2;$/;"	v
lastbreak2	init.c	/^double *lastbreak1, *lastbreak2;$/;"	v
loadCor	../commSrc/scalProc.c	/^void loadCor(int cfd)$/;"	f
loadCor	../commSrc/scalProc_PT.c	/^void loadCor(int cfd)$/;"	f
logBlock	../commSrc/mdinit_DPT.c	/^int logBlock;$/;"	v
logBlock	../commSrc/mdinit_PT.c	/^int logBlock;$/;"	v
logBlock	../commSrc/mdutil.c	/^int logBlock;$/;"	v
logBlock	../commSrc/mdutil.c	/^long long int logBlock;$/;"	v
loop	../commSrc/mdsimul.h	153;"	d
m	../commSrc/mdsimdep.h	/^  COORD_TYPE m[2];             \/* atoms masses *\/$/;"	m	struct:params
m	../commSrc/xva2ascii.h	/^COORD_TYPE m, d, Vol, Mtot;$/;"	v
m	ellipsoid.h	/^  COORD_TYPE m[2];             \/* atoms masses *\/$/;"	m	struct:params
m0	xvautil.h	/^COORD_TYPE m0, m1, d, Vol, GsrMax, wtdRmax, kMax;$/;"	v
m1	xvautil.h	/^COORD_TYPE m0, m1, d, Vol, GsrMax, wtdRmax, kMax;$/;"	v
main	../commSrc/bak2cor.c	/^void main(int argc, char* argv[])$/;"	f
main	../commSrc/calcEta.c	/^void main(int argc, char** argv)$/;"	f
main	../commSrc/chkStatus.c	/^void main(int argc, char** argv) $/;"	f
main	../commSrc/cor2cor.c	/^void main(int argc, char* argv[])$/;"	f
main	../commSrc/log.c	/^void main(int argc, char** argv)$/;"	f
main	../commSrc/md2ascii.c	/^void main(int argc, char** argv)$/;"	f
main	../commSrc/md2ascii_DPT.c	/^void main(int argc, char** argv)$/;"	f
main	../commSrc/md2ascii_PT.c	/^void main(int argc, char** argv)$/;"	f
main	../commSrc/mdsimul.c	/^void main(int argc, char *argv[])$/;"	f
main	../commSrc/mdsimul_PT.c	/^void main(int argc, char *argv[])$/;"	f
main	../commSrc/meanc.c	/^void main(int argc, char* argv[])$/;"	f
main	../commSrc/xva2ascii.c	/^int main(int argc, char** argv)$/;"	f
main	corutil.c	/^void main(int argc, char* argv[])$/;"	f
main	cri2fra.c	/^void main(int argc, char** argv)$/;"	f
main	xvautil.c	/^void main(int argc, char** argv)$/;"	f
maxbonds	../commSrc/mdsimdep.h	/^  int maxbonds;$/;"	m	struct:progStatus
maxbonds	ellipsoid.h	/^  int maxbonds;$/;"	m	struct:progStatus
maxquench	../commSrc/mdsimdep.h	/^  int maxquench;$/;"	m	struct:progStatus
maxquench	ellipsoid.h	/^  int maxquench;$/;"	m	struct:progStatus
maxwell	measures.c	/^void maxwell(void)$/;"	f
mdClose	../commSrc/mdio.c	/^int mdClose(int fd, char* when, char* errMsg, int mode)$/;"	f
mdClose	../commSrc/mdio_DPT.c	/^int mdClose(int fd, char* when, char* errMsg, int mode)$/;"	f
mdCreat	../commSrc/mdio.c	/^int mdCreat(char* fileName, char* when, char* errMsg, int mode) $/;"	f
mdCreat	../commSrc/mdio_DPT.c	/^int mdCreat(char* fileName, char* when, char* errMsg, int mode) $/;"	f
mdMsg	../commSrc/mdio.c	/^void mdMsg(int mode, int errnum, char *when, char *errType, char* sysCall,$/;"	f
mdMsg	../commSrc/mdio_DPT.c	/^void mdMsg(int mode, int errnum, char *when, char *errType, char* sysCall,$/;"	f
mdOpen	../commSrc/mdio.c	/^int mdOpen( char* fileName, char* when, char* errMsg, int mode)$/;"	f
mdOpen	../commSrc/mdio_DPT.c	/^int mdOpen( char* fileName, char* when, char* errMsg, int mode)$/;"	f
mdOpen_Tord	../commSrc/mdio_DPT.c	/^int mdOpen_Tord( char* fileName, char* when, char* errMsg, int mode)$/;"	f
mdPrintf	../commSrc/mdio.c	/^void mdPrintf(int mode, char *text, ...)$/;"	f
mdPrintf	../commSrc/mdio_DPT.c	/^void mdPrintf(int mode, char *text, ...)$/;"	f
mdPrintfR0	../commSrc/mdio.c	/^void mdPrintfR0(int mode, char *text, ...)$/;"	f
mdPrintfR0	../commSrc/mdio_DPT.c	/^void mdPrintfR0(int mode, char *text, ...)$/;"	f
mdPrintfSpc	../commSrc/mdio.c	/^void mdPrintfSpc(int mode, char* text)$/;"	f
mdPrintfSpc	../commSrc/mdio_DPT.c	/^void mdPrintfSpc(int mode, char* text)$/;"	f
mdPrintfSpcWr	../commSrc/mdio.c	/^void mdPrintfSpcWr(int mode, char* text)$/;"	f
mdPrintfSpcWr	../commSrc/mdio_DPT.c	/^void mdPrintfSpcWr(int mode, char* text)$/;"	f
mdPrintfWr	../commSrc/mdio.c	/^void mdPrintfWr(int mode, char* text)$/;"	f
mdPrintfWr	../commSrc/mdio_DPT.c	/^void mdPrintfWr(int mode, char* text)$/;"	f
mdRead	../commSrc/mdio.c	/^int  mdRead(int fdes, char* when, char* errMsg, int mode, $/;"	f
mdRead	../commSrc/mdio_DPT.c	/^int  mdRead(int fdes, char* when, char* errMsg, int mode, $/;"	f
mdShow	../commSrc/mdsimul.h	141;"	d
mdWrite	../commSrc/mdio.c	/^int mdWrite(int fdes, char* when, char* errMsg, int mode,$/;"	f
mdWrite	../commSrc/mdio_DPT.c	/^int mdWrite(int fdes, char* when, char* errMsg, int mode,$/;"	f
mdseed	../commSrc/mdsimdep.h	/^  int mdseed;$/;"	m	struct:progStatus
mdseed	../commSrc/mdsimul.h	/^int mdseed=0;$/;"	v
mdseed	ellipsoid.h	/^  int mdseed;$/;"	m	struct:progStatus
measCalc	../commSrc/mdsimdep.h	/^  MDINT measCalc[NUM_MISURE]; \/*steps between two measure calculation *\/$/;"	m	struct:progStatus
measCalc	ellipsoid.h	/^  MDINT measCalc[NUM_MISURE]; \/*steps between two measure calculation *\/$/;"	m	struct:progStatus
measHead	../commSrc/mdsimdep.h	/^struct measHead$/;"	s
measHead	ellipsoid.h	/^struct measHead$/;"	s
measSteps	../commSrc/mdsimdep.h	/^  MDINT measSteps[NUM_MISURE];\/*steps after which save every measure *\/$/;"	m	struct:progStatus
measSteps	ellipsoid.h	/^  MDINT measSteps[NUM_MISURE];\/*steps after which save every measure *\/$/;"	m	struct:progStatus
measure	../commSrc/mdsimul.h	/^struct measure $/;"	s
measureTimes	../commSrc/mdsimul.c	/^int bakTimes = 0, measureTimes = 0, xvaTimes = 0;$/;"	v
measureTimes	../commSrc/mdsimul_PT.c	/^int bakTimes = 0, measureTimes = 0, xvaTimes = 0;$/;"	v
mgA	init.c	/^double mgA, mgB, g2;$/;"	v
mgB	init.c	/^double mgA, mgB, g2;$/;"	v
mis	../commSrc/mdsimdep.h	/^void* mis;$/;"	v
mis	ellipsoid.h	/^void* mis;$/;"	v
misPath	../commSrc/mdsimdep.h	/^  char misPath[NAME_LENGTH];$/;"	m	struct:progStatus
misPath	ellipsoid.h	/^  char misPath[NAME_LENGTH];$/;"	m	struct:progStatus
mkFormat	../commSrc/calcEta.c	/^void mkFormat(char* fmtStr)$/;"	f
mkFormat	../commSrc/xva2ascii.c	/^void mkFormat(char* fmtStr)$/;"	f
mkFormat	xvautil.c	/^void mkFormat(char* fmtStr)$/;"	f
mode	../commSrc/mdsimdep.h	/^  int mode;$/;"	m	struct:xvaHead
mode	ellipsoid.h	/^  int mode;$/;"	m	struct:xvaHead
move	move.c	/^void move(void)$/;"	f
msgStrA	../commSrc/mdio.c	/^char msgStrA[MSG_LEN],msgStrB[MSG_LEN],msgStrC[MSG_LEN]; $/;"	v
msgStrA	../commSrc/mdio_DPT.c	/^char msgStrA[MSG_LEN],msgStrB[MSG_LEN],msgStrC[MSG_LEN]; $/;"	v
msgStrB	../commSrc/mdio.c	/^char msgStrA[MSG_LEN],msgStrB[MSG_LEN],msgStrC[MSG_LEN]; $/;"	v
msgStrB	../commSrc/mdio_DPT.c	/^char msgStrA[MSG_LEN],msgStrB[MSG_LEN],msgStrC[MSG_LEN]; $/;"	v
msgStrC	../commSrc/mdio.c	/^char msgStrA[MSG_LEN],msgStrB[MSG_LEN],msgStrC[MSG_LEN]; $/;"	v
msgStrC	../commSrc/mdio_DPT.c	/^char msgStrA[MSG_LEN],msgStrB[MSG_LEN],msgStrC[MSG_LEN]; $/;"	v
multi	../commSrc/md2ascii_DPT.c	/^int REPLICA, multi = 0, lambda = 0;$/;"	v
multi	../commSrc/md2ascii_PT.c	/^int REPLICA, multi = 0, lambda = 0;$/;"	v
my_rank	../commSrc/mdinit.c	/^int my_rank;$/;"	v
my_rank	../commSrc/mdio.c	/^int my_rank, numOfProcs;$/;"	v
my_rank	../commSrc/mdio_DPT.c	/^int my_rank, numOfProcs;$/;"	v
nRun	../commSrc/mdsimdep.h	/^  char nRun[32];$/;"	m	struct:progStatus
nRun	../commSrc/xva2ascii.h	/^int nRun, PTM;$/;"	v
nRun	ellipsoid.h	/^  char nRun[32];$/;"	m	struct:progStatus
nTeta	xvautil.h	/^int tCor, printEvery, nTeta, tBeg, Gsnr, base, NN, xvaSaveMode = 0; $/;"	v
nebrTabFac	../commSrc/mdsimdep.h	/^  int nebrTabFac;                \/* How much storage sould be provided for $/;"	m	struct:progStatus
nebrTabFac	ellipsoid.h	/^  int nebrTabFac;                \/* How much storage sould be provided for $/;"	m	struct:progStatus
newSim	../commSrc/mdsimul.h	/^int newSim; \/* if 0 => new continuing *\/$/;"	v
nextDt	../commSrc/mdsimdep.h	/^  double nextDt;$/;"	m	struct:progStatus
nextDt	ellipsoid.h	/^  double nextDt;$/;"	m	struct:progStatus
nextStoreTime	../commSrc/mdsimdep.h	/^  double nextStoreTime;$/;"	m	struct:progStatus
nextStoreTime	ellipsoid.h	/^  double nextStoreTime;$/;"	m	struct:progStatus
nextSumTime	../commSrc/mdsimdep.h	/^  double nextSumTime;$/;"	m	struct:progStatus
nextSumTime	ellipsoid.h	/^  double nextSumTime;$/;"	m	struct:progStatus
nextcheckTime	../commSrc/mdsimdep.h	/^  double nextcheckTime;$/;"	m	struct:progStatus
nextcheckTime	ellipsoid.h	/^  double nextcheckTime;$/;"	m	struct:progStatus
njob	../commSrc/xva2ascii.c	/^int njob = 0;$/;"	v
norm	../commSrc/calcEta.h	/^int *normv, *norm;$/;"	v
norm	xvautil.h	/^int *normv, *norm, numOfProcs;$/;"	v
normv	../commSrc/calcEta.h	/^int *normv, *norm;$/;"	v
normv	xvautil.h	/^int *normv, *norm, numOfProcs;$/;"	v
np	../commSrc/xva2ascii.h	/^int tTot, printEvery, tBeg = 0, tgap, numParts, np[MP]; $/;"	v
numOfProcs	../commSrc/mdio.c	/^int my_rank, numOfProcs;$/;"	v
numOfProcs	../commSrc/mdio_DPT.c	/^int my_rank, numOfProcs;$/;"	v
numOfProcs	xvautil.h	/^int *normv, *norm, numOfProcs;$/;"	v
numParts	../commSrc/xva2ascii.h	/^int tTot, printEvery, tBeg = 0, tgap, numParts, np[MP]; $/;"	v
numbonds	init.c	/^int *bondscache, *numbonds, **bonds, *numbonds0, **bonds0;$/;"	v
numbonds	measures.c	/^int *numbonds;$/;"	v
numbonds0	init.c	/^int *bondscache, *numbonds, **bonds, *numbonds0, **bonds0;$/;"	v
numinf	../commSrc/meanc.c	/^int numinf=0, numx = 0;$/;"	v
numquench	../commSrc/mdsimdep.h	/^  int numquench;$/;"	m	struct:progStatus
numquench	ellipsoid.h	/^  int numquench;$/;"	m	struct:progStatus
numx	../commSrc/meanc.c	/^int numinf=0, numx = 0;$/;"	v
ofm	../commSrc/md2ascii_DPT.c	/^char ofm[MAX_M][NAME_LENGTH];$/;"	v
ofm	../commSrc/md2ascii_PT.c	/^char ofm[MAX_M][NAME_LENGTH];$/;"	v
ohdr	corutil.c	/^int SEGSIZE, corBool = 0, tBool = 0, ihdr = 1, ohdr = 1, posBool = 0, Nm,$/;"	v
opar_ascii	../commSrc/mdsimdep.h	/^struct pascii opar_ascii[]=$/;"	v
opar_ascii	ellipsoid.h	/^struct pascii opar_ascii[]=$/;"	v
openLog	../commSrc/mdio.c	/^void openLog(char* mode)$/;"	f
openLog	../commSrc/mdio_DPT.c	/^void openLog(char* mode)$/;"	f
openMPI	../commSrc/mdio.c	/^int openMPI(char* fn, int how)$/;"	f
openMPI	../commSrc/mdio_DPT.c	/^int openMPI(char* fn, int how)$/;"	f
openMPI_Tord	../commSrc/mdio_DPT.c	/^int openMPI_Tord(char* fn, int how)$/;"	f
openMeas	../commSrc/calcEta.c	/^int openMeas(char* FileName)$/;"	f
openMeasFile	../commSrc/xva2ascii.c	/^int openMeasFile(char* FileName)$/;"	f
openMeasFile	xvautil.c	/^int openMeasFile(char* FileName)$/;"	f
openMeasFileWR	xvautil.c	/^int openMeasFileWR(char* FileName, int rank)$/;"	f
openNewMPI	../commSrc/mdio.c	/^int openNewMPI(char* fn, int how, int perm)$/;"	f
openNewMPI	../commSrc/mdio_DPT.c	/^int openNewMPI(char* fn, int how, int perm)$/;"	f
openNewMPI_Tord	../commSrc/mdio_DPT.c	/^int openNewMPI_Tord(char* fn, int how, int perm)$/;"	f
opro_ascii	../commSrc/mdsimdep.h	/^struct pascii opro_ascii[] =$/;"	v
opro_ascii	ellipsoid.h	/^struct pascii opro_ascii[] =$/;"	v
outBool	corutil.c	/^int outBool = 0; \/* if true writes output coordinates file *\/$/;"	v
outFile	../commSrc/bak2cor.c	/^char outFile[NAME_LENGTH];$/;"	v
outFile	../commSrc/md2ascii.c	/^char outFile[NAME_LENGTH];  \/* output file (ascii file) name *\/$/;"	v
outFile	../commSrc/md2ascii_DPT.c	/^char outFile[NAME_LENGTH];  \/* output file (ascii file) name *\/$/;"	v
outFile	../commSrc/md2ascii_PT.c	/^char outFile[NAME_LENGTH];  \/* output file (ascii file) name *\/$/;"	v
outFile	../commSrc/meanc.c	/^char outFile[512];$/;"	v
outFile	corutil.c	/^char outFile[NAME_LENGTH];  \/* output file (ascii file) name *\/$/;"	v
output	../commSrc/chkStatus.c	/^FILE *chkout, *output;$/;"	v
output	../commSrc/mdio.c	/^FILE* output;$/;"	v
output	../commSrc/mdio_DPT.c	/^FILE* output;$/;"	v
output	../commSrc/mdsimul.c	/^FILE* output;$/;"	v
output	../commSrc/mdsimul_PT.c	/^FILE* output;$/;"	v
outputSummary	move.c	/^void outputSummary(void)$/;"	f
overlaptol	../commSrc/mdsimdep.h	/^  double overlaptol;$/;"	m	struct:progStatus
overlaptol	ellipsoid.h	/^  double overlaptol;$/;"	m	struct:progStatus
parName	../commSrc/mdsimul.h	/^  char parName[NAME_LENGTH];$/;"	m	struct:pascii
parName	../commSrc/mdsimul.h	/^  char parName[NAME_LENGTH];$/;"	m	struct:singlePar
parallel_tempering_init	../commSrc/mdinit_DPT.c	/^void parallel_tempering_init(void)$/;"	f
parallel_tempering_init	../commSrc/mdinit_PT.c	/^void parallel_tempering_init(void)$/;"	f
paramFile	../commSrc/mdsimul.c	/^char paramFile[NAME_LENGTH];$/;"	v
paramFile	../commSrc/mdsimul_PT.c	/^char paramFile[NAME_LENGTH];$/;"	v
params	../commSrc/mdsimdep.h	/^struct params$/;"	s
params	ellipsoid.h	/^struct params$/;"	s
parnum	../commSrc/mdsimdep.h	/^  int parnum;        	\/* total number of particles *\/$/;"	m	struct:params
parnum	../commSrc/mdsimdep.h	/^  int parnum;$/;"	m	struct:xvaHead
parnum	ellipsoid.h	/^  int parnum;        	\/* total number of particles *\/$/;"	m	struct:params
parnum	ellipsoid.h	/^  int parnum;$/;"	m	struct:xvaHead
parnumA	../commSrc/mdsimdep.h	/^  int parnumA;          \/* number of particles A *\/$/;"	m	struct:params
parnumA	ellipsoid.h	/^  int parnumA;          \/* number of particles A *\/$/;"	m	struct:params
parnumA	init.c	/^int parnumA, parnumB;$/;"	v
parnumA	move.c	/^int evIdA, evIdB, parnumB, parnumA;$/;"	v
parnumB	init.c	/^int parnumA, parnumB;$/;"	v
parnumB	move.c	/^int evIdA, evIdB, parnumB, parnumA;$/;"	v
partDiss	../commSrc/mdsimdep.h	/^  double partDiss;             \/*dissipazione negli urti fra particelle *\/$/;"	m	struct:params
partDiss	ellipsoid.h	/^  double partDiss;             \/*dissipazione negli urti fra particelle *\/$/;"	m	struct:params
pascii	../commSrc/mdsimul.h	/^struct pascii$/;"	s
phi0x	xvautil.h	/^COORD_TYPE *phix, *phiy, *phiz, *phi0x, *phi0y, *phi0z,$/;"	v
phi0y	xvautil.h	/^COORD_TYPE *phix, *phiy, *phiz, *phi0x, *phi0y, *phi0z,$/;"	v
phi0z	xvautil.h	/^COORD_TYPE *phix, *phiy, *phiz, *phi0x, *phi0y, *phi0z,$/;"	v
phiFile	xvautil.h	/^char phiFile[128]; \/* File containing the angular positions at all instants *\/$/;"	v
phiFlag	xvautil.h	/^  phiFlag=1, C4Flag=1, dphiSqFlag=1, drSqFlag=1, DtFlag=1, DrFlag=1, $/;"	v
phitt0x	xvautil.h	/^  *phitt0x, *phitt0y, *phitt0z;$/;"	v
phitt0y	xvautil.h	/^  *phitt0x, *phitt0y, *phitt0z;$/;"	v
phitt0z	xvautil.h	/^  *phitt0x, *phitt0y, *phitt0z;$/;"	v
phix	xvautil.h	/^COORD_TYPE *phix, *phiy, *phiz, *phi0x, *phi0y, *phi0z,$/;"	v
phiy	xvautil.h	/^COORD_TYPE *phix, *phiy, *phiz, *phi0x, *phi0y, *phi0z,$/;"	v
phiz	xvautil.h	/^COORD_TYPE *phix, *phiy, *phiz, *phi0x, *phi0y, *phi0z,$/;"	v
pi	../commSrc/calcEta.h	/^COORD_TYPE pi;$/;"	v
pi	../commSrc/xva2ascii.h	/^COORD_TYPE pi;$/;"	v
pi	move.c	/^double pi, invL, L2, Vz;   $/;"	v
pi	xvautil.h	/^COORD_TYPE pi;$/;"	v
pool	../commSrc/mdsimul.h	155;"	d
poolSize	init.c	/^int poolSize;$/;"	v
popSteps	../commSrc/mdarray.c	/^void popSteps(long long int* saveSteps)$/;"	f
popSteps	../commSrc/mdarrayMIX.c	/^void popSteps(int* saveSteps)$/;"	f
popSteps	../commSrc/mdarrayMLMC.c	/^void popSteps(int* saveSteps)$/;"	f
popSteps	../commSrc/mdarray_DPT.c	/^void popSteps(int* saveSteps)$/;"	f
popSteps	../commSrc/mdarray_PT.c	/^void popSteps(int* saveSteps)$/;"	f
posBool	corutil.c	/^int SEGSIZE, corBool = 0, tBool = 0, ihdr = 1, ohdr = 1, posBool = 0, Nm,$/;"	v
posFile	corutil.c	/^char posFile[NAME_LENGTH];  \/* name of the positions file *\/$/;"	v
precision	../commSrc/calcEta.h	/^char precision[64];$/;"	v
precision	../commSrc/mdsimdep.h	/^char precision[64];         $/;"	v
precision	../commSrc/xva2ascii.h	/^char precision[64];$/;"	v
precision	ellipsoid.h	/^char precision[64];         $/;"	v
precision	xvautil.h	/^char precision[64];$/;"	v
press	../commSrc/mdsimdep.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
press	ellipsoid.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
press_at	../commSrc/mdsimdep.h	/^  press_m, press_at, rcmz, rho, ItensD[2][3];$/;"	v
press_at	ellipsoid.h	/^  press_m, press_at, rcmz, rho, ItensD[2][3];$/;"	v
press_m	../commSrc/mdsimdep.h	/^  press_m, press_at, rcmz, rho, ItensD[2][3];$/;"	v
press_m	ellipsoid.h	/^  press_m, press_at, rcmz, rho, ItensD[2][3];$/;"	v
printEvery	../commSrc/calcEta.h	/^int tCor, printEvery, tBeg, tRun; $/;"	v
printEvery	../commSrc/xva2ascii.h	/^int tTot, printEvery, tBeg = 0, tgap, numParts, np[MP]; $/;"	v
printEvery	xvautil.h	/^int tCor, printEvery, nTeta, tBeg, Gsnr, base, NN, xvaSaveMode = 0; $/;"	v
printerRank	../commSrc/mdio.c	/^int printerRank;$/;"	v
printerRank	../commSrc/mdio_DPT.c	/^int printerRank;$/;"	v
progExist	../commSrc/mdutil.c	/^int progExist(char *name)$/;"	f
progStatus	../commSrc/mdsimdep.h	/^struct progStatus$/;"	s
progStatus	ellipsoid.h	/^struct progStatus$/;"	s
psi1File	xvautil.h	/^char velFile[128], psi1File[128], psi2File[128], C1File[128], C2File[128], $/;"	v
psi1Flag	xvautil.h	/^int velFlag=1, psi1Flag=1, psi2Flag=1, vhFlag=1, C1Flag=1, C2Flag=1, C3Flag=1,$/;"	v
psi1acf	xvautil.h	/^COORD_TYPE *velacf, *psi1acf, *psi2acf, *C1acf, *C2acf, *C3acf, $/;"	v
psi2File	xvautil.h	/^char velFile[128], psi1File[128], psi2File[128], C1File[128], C2File[128], $/;"	v
psi2Flag	xvautil.h	/^int velFlag=1, psi1Flag=1, psi2Flag=1, vhFlag=1, C1Flag=1, C2Flag=1, C3Flag=1,$/;"	v
psi2acf	xvautil.h	/^COORD_TYPE *velacf, *psi1acf, *psi2acf, *C1acf, *C2acf, *C3acf, $/;"	v
ptr	../commSrc/mdsimul.h	/^  void* ptr;$/;"	m	struct:pascii
ptr	../commSrc/mdsimul.h	/^  void* ptr;$/;"	m	struct:singlePar
pushSteps	../commSrc/mdarray.c	/^void pushSteps(long long int* saveSteps)$/;"	f
pushSteps	../commSrc/mdarrayMIX.c	/^void pushSteps(int* saveSteps)$/;"	f
pushSteps	../commSrc/mdarrayMLMC.c	/^void pushSteps(int* saveSteps)$/;"	f
pushSteps	../commSrc/mdarray_DPT.c	/^void pushSteps(int* saveSteps)$/;"	f
pushSteps	../commSrc/mdarray_PT.c	/^void pushSteps(int* saveSteps)$/;"	f
qty	../commSrc/mdsimul.h	/^  int qty;$/;"	m	struct:pascii
quenchend	../commSrc/mdsimdep.h	/^  double quenchend;$/;"	m	struct:progStatus
quenchend	ellipsoid.h	/^  double quenchend;$/;"	m	struct:progStatus
quenchtol	../commSrc/mdsimdep.h	/^  double quenchtol;$/;"	m	struct:progStatus
quenchtol	ellipsoid.h	/^  double quenchtol;$/;"	m	struct:progStatus
rNebrShell	../commSrc/mdsimdep.h	/^  COORD_TYPE rNebrShell;   \/* Dr of shell of neighbour list shell see Rapaport pag. 53 *\/$/;"	m	struct:progStatus
rNebrShell	ellipsoid.h	/^  COORD_TYPE rNebrShell;   \/* Dr of shell of neighbour list shell see Rapaport pag. 53 *\/$/;"	m	struct:progStatus
rSegs	../commSrc/scalProc.c	/^void rSegs(int fdes, int size, void* pointer, ...)$/;"	f
rSegs	../commSrc/scalProc_PT.c	/^void rSegs(int fdes, int size, void* pointer, ...)$/;"	f
radDens	measures.c	/^void radDens(void)$/;"	f
ranf	init.c	/^COORD_TYPE ranf(void)$/;"	f
rbeg	../commSrc/md2ascii.c	/^double rbeg=RBEG, rend=REND;$/;"	v
rcmz	../commSrc/mdsimdep.h	/^  press_m, press_at, rcmz, rho, ItensD[2][3];$/;"	v
rcmz	ellipsoid.h	/^  press_m, press_at, rcmz, rho, ItensD[2][3];$/;"	v
rcut	../commSrc/mdsimdep.h	/^  double rcut;$/;"	m	struct:params
rcut	ellipsoid.h	/^  double rcut;$/;"	m	struct:params
readAllCor	init.c	/^void readAllCor(FILE* fs)$/;"	f
readAllMeas	../commSrc/calcEta.c	/^void readAllMeas(int fd, COORD_TYPE* Cxy, COORD_TYPE* Cyz, COORD_TYPE* Czx)$/;"	f
readAsciiPars	../commSrc/mdarray.c	/^void readAsciiPars(FILE* pfs, struct pascii strutt[])$/;"	f
readAsciiPars	../commSrc/mdarrayMIX.c	/^void readAsciiPars(FILE* pfs, struct pascii strutt[])$/;"	f
readAsciiPars	../commSrc/mdarrayMLMC.c	/^void readAsciiPars(FILE* pfs, struct pascii strutt[])$/;"	f
readAsciiPars	../commSrc/mdarray_DPT.c	/^void readAsciiPars(FILE* pfs, struct pascii strutt[])$/;"	f
readAsciiPars	../commSrc/mdarray_PT.c	/^void readAsciiPars(FILE* pfs, struct pascii strutt[])$/;"	f
readBak	../commSrc/mdarray.c	/^int readBak(int bfd)$/;"	f
readBak	../commSrc/mdarrayMIX.c	/^int readBak(int bfd)$/;"	f
readBak	../commSrc/mdarrayMLMC.c	/^int readBak(int bfd)$/;"	f
readBak	../commSrc/mdarray_DPT.c	/^int readBak(int bfd)$/;"	f
readBak	../commSrc/mdarray_PT.c	/^int readBak(int bfd)$/;"	f
readBakAscii	../commSrc/mdarray.c	/^void readBakAscii(char* fn)$/;"	f
readBakAscii	../commSrc/mdarrayMIX.c	/^void readBakAscii(char* fn)$/;"	f
readBakAscii	../commSrc/mdarrayMLMC.c	/^void readBakAscii(char* fn)$/;"	f
readBakAscii	../commSrc/mdarray_DPT.c	/^void readBakAscii(char* fn)$/;"	f
readBakAscii	../commSrc/mdarray_PT.c	/^void readBakAscii(char* fn)$/;"	f
readCoord	../commSrc/mdarray.c	/^int readCoord(int cfd)$/;"	f
readCoord	../commSrc/mdarrayMIX.c	/^int readCoord(int cfd)$/;"	f
readCoord	../commSrc/mdarrayMLMC.c	/^int readCoord(int cfd)$/;"	f
readCoord	../commSrc/mdarray_DPT.c	/^int readCoord(int cfd)$/;"	f
readCoord	../commSrc/mdarray_PT.c	/^int readCoord(int cfd)$/;"	f
readCorAscii	../commSrc/mdarray.c	/^void readCorAscii(char *fn)$/;"	f
readCorAscii	../commSrc/mdarrayMIX.c	/^void readCorAscii(char *fn)$/;"	f
readCorAscii	../commSrc/mdarrayMLMC.c	/^void readCorAscii(char *fn)$/;"	f
readCorAscii	../commSrc/mdarray_DPT.c	/^void readCorAscii(char *fn)$/;"	f
readCorAscii	../commSrc/mdarray_PT.c	/^void readCorAscii(char *fn)$/;"	f
readFile	../commSrc/mdarray.c	/^int readFile(int fdes)$/;"	f
readFile	../commSrc/mdarrayMIX.c	/^int readFile(int fdes)$/;"	f
readFile	../commSrc/mdarrayMLMC.c	/^int readFile(int fdes)$/;"	f
readFile	../commSrc/mdarray_DPT.c	/^int readFile(int fdes)$/;"	f
readFile	../commSrc/mdarray_PT.c	/^int readFile(int fdes)$/;"	f
readMeas	../commSrc/xva2ascii.c	/^int readMeas(int fd, int nmeas, COORD_TYPE* firstPtr, ...)$/;"	f
readMeas	xvautil.c	/^int readMeas(int fd, int nmeas, COORD_TYPE* firstPtr, ...)$/;"	f
readPars	../commSrc/calcEta.c	/^void readPars(char* fileName)$/;"	f
readPars	../commSrc/xva2ascii.c	/^void readPars(char* fileName)$/;"	f
readPars	xvautil.c	/^void readPars(char* fileName)$/;"	f
readSMeas	../commSrc/calcEta.c	/^int readSMeas(int fd, int nmeas, $/;"	f
readSegs	../commSrc/mdio.c	/^int readSegs(int fdes, char* when, char *errMsg, int mode,$/;"	f
readSegs	../commSrc/mdio_DPT.c	/^int readSegs(int fdes, char* when, char *errMsg, int mode,$/;"	f
readSegsPT	../commSrc/mdarray_PT.c	/^int readSegsPT(int fdes, char* when, char *errMsg, int mode,$/;"	f
readSegsPoly	../commSrc/mdio.c	/^int readSegsPoly(int fdes, char* when, char *errMsg, int mode,$/;"	f
rebuildCalendar	move.c	/^void rebuildCalendar(void)$/;"	f
rebuildLinkedList	move.c	/^void rebuildLinkedList(void)$/;"	f
redTime	xvautil.c	/^double redTime(int p, int NN, double base)$/;"	f
remove_bond	move.c	/^void remove_bond(int na, int n)$/;"	f
rend	../commSrc/md2ascii.c	/^double rbeg=RBEG, rend=REND;$/;"	v
reread	../commSrc/mdinit.c	/^void reread(char* argom)$/;"	f
reread	../commSrc/mdinitMLMC.c	/^void reread(char* argom)$/;"	f
reread	../commSrc/mdinit_DPT.c	/^void reread(char* argom)$/;"	f
rereadPTbool	../commSrc/mdinit_DPT.c	/^int rereadPTbool = 0;$/;"	v
rereadbool	../commSrc/mdinit.c	/^int rereadbool = 0;$/;"	v
rereadbool	../commSrc/mdinitMLMC.c	/^int rereadbool = 0;$/;"	v
rereadbool	../commSrc/mdinit_DPT.c	/^int rereadbool = 0;$/;"	v
rescaleTime	../commSrc/mdsimdep.h	/^  double rescaleTime;$/;"	m	struct:progStatus
rescaleTime	ellipsoid.h	/^  double rescaleTime;$/;"	m	struct:progStatus
resetCM	init.c	/^void resetCM(int onlyz)$/;"	f
rho	../commSrc/mdsimdep.h	/^  press_m, press_at, rcmz, rho, ItensD[2][3];$/;"	v
rho	ellipsoid.h	/^  press_m, press_at, rcmz, rho, ItensD[2][3];$/;"	v
rhobh	../commSrc/mdsimdep.h	/^  double rhobh;$/;"	m	struct:progStatus
rhobh	ellipsoid.h	/^  double rhobh;$/;"	m	struct:progStatus
running	../commSrc/mdsimul.h	/^  bool running;		        \/* if true means that simulation is  $/;"	m	struct:simStat
rxCMi	../commSrc/mdsimdep.h	/^  COORD_TYPE rxCMi[MAXPAR]; \/* initial coordinates of center of mass *\/$/;"	m	struct:progStatus
rxCMi	ellipsoid.h	/^  COORD_TYPE rxCMi[MAXPAR]; \/* initial coordinates of center of mass *\/$/;"	m	struct:progStatus
ryCMi	../commSrc/mdsimdep.h	/^  COORD_TYPE ryCMi[MAXPAR]; \/* MAXPAR is the maximum number of particles *\/$/;"	m	struct:progStatus
ryCMi	ellipsoid.h	/^  COORD_TYPE ryCMi[MAXPAR]; \/* MAXPAR is the maximum number of particles *\/$/;"	m	struct:progStatus
rzCMi	../commSrc/mdsimdep.h	/^  COORD_TYPE rzCMi[MAXPAR];$/;"	m	struct:progStatus
rzCMi	ellipsoid.h	/^  COORD_TYPE rzCMi[MAXPAR];$/;"	m	struct:progStatus
rzup	../commSrc/mdsimdep.h	/^  double rzup;$/;"	m	struct:progStatus
rzup	ellipsoid.h	/^  double rzup;$/;"	m	struct:progStatus
saveAcf	../commSrc/calcEta.c	/^void saveAcf(char* fileName, COORD_TYPE* acf, int beg, int end)$/;"	f
saveAcf	xvautil.c	/^void saveAcf(char* fileName, COORD_TYPE* acf)$/;"	f
saveBak	../commSrc/mdarray.c	/^void saveBak(char *fileName)$/;"	f
saveBak	../commSrc/mdarrayMIX.c	/^void saveBak(char *fileName)$/;"	f
saveBak	../commSrc/mdarrayMLMC.c	/^void saveBak(char *fileName)$/;"	f
saveBak	../commSrc/mdarray_DPT.c	/^void saveBak(char *fileName)$/;"	f
saveBak	../commSrc/mdarray_PT.c	/^void saveBak(char *fileName)$/;"	f
saveBakAscii	../commSrc/mdarray.c	/^void saveBakAscii(char *fn)$/;"	f
saveBakAscii	../commSrc/mdarrayMIX.c	/^void saveBakAscii(char* fn)$/;"	f
saveBakAscii	../commSrc/mdarrayMLMC.c	/^void saveBakAscii(char* fn)$/;"	f
saveBakAscii	../commSrc/mdarray_DPT.c	/^void saveBakAscii(char *fn)$/;"	f
saveBakAscii	../commSrc/mdarray_PT.c	/^void saveBakAscii(char *fn)$/;"	f
saveCoord	../commSrc/mdarray.c	/^void saveCoord(char* fileName)$/;"	f
saveCoord	../commSrc/mdarrayMIX.c	/^void saveCoord(char* fileName)$/;"	f
saveCoord	../commSrc/mdarrayMLMC.c	/^void saveCoord(char* fileName)$/;"	f
saveCoord	../commSrc/mdarray_DPT.c	/^void saveCoord(char* fileName)$/;"	f
saveCoord	../commSrc/mdarray_PT.c	/^void saveCoord(char* fileName)$/;"	f
saveCor	../commSrc/scalProc.c	/^void saveCor(char* fileName)$/;"	f
saveCor	../commSrc/scalProc_PT.c	/^void saveCor(char* fileName)$/;"	f
saveCorAscii	../commSrc/mdarray.c	/^void saveCorAscii(void)$/;"	f
saveCorAscii	../commSrc/mdarrayMIX.c	/^void saveCorAscii(void)$/;"	f
saveCorAscii	../commSrc/mdarrayMLMC.c	/^void saveCorAscii(void)$/;"	f
saveCorAscii	../commSrc/mdarray_DPT.c	/^void saveCorAscii(void)$/;"	f
saveCorAscii	../commSrc/mdarray_PT.c	/^void saveCorAscii(void)$/;"	f
saveFself	xvautil.c	/^void saveFself(char* fileName, COORD_TYPE* fs)$/;"	f
saveGself	xvautil.c	/^void saveGself(char* fileName, COORD_TYPE** gs)$/;"	f
saveMeasure	../commSrc/mdarray.c	/^int saveMeasure(int PN, char* fileName, int misNum, char* msgOpen, char* msgWrite, $/;"	f
saveMeasure	../commSrc/mdarrayMIX.c	/^int saveMeasure(int PN, char* fileName, int misNum, char* msgOpen, char* msgWrite, $/;"	f
saveMeasure	../commSrc/mdarrayMLMC.c	/^int saveMeasure(int PN, char* fileName, int misNum, char* msgOpen, char* msgWrite, $/;"	f
saveMeasure	../commSrc/mdarray_DPT.c	/^int saveMeasure(int PN, char* fileName, int misNum, char* msgOpen, char* msgWrite, $/;"	f
saveMeasure	../commSrc/mdarray_PT.c	/^int saveMeasure(int PN, char* fileName, int misNum, char* msgOpen, char* msgWrite, $/;"	f
saveOneCoord	../commSrc/mdarray_PT.c	/^void saveOneCoord(char* fileName, int ss)$/;"	f
saveOneXva	../commSrc/mdarray.c	/^void saveOneXva(char* fileName)$/;"	f
saveOneXva	../commSrc/mdarrayMIX.c	/^void saveOneXva(char* fileName)$/;"	f
saveOneXva	../commSrc/mdarrayMLMC.c	/^void saveOneXva(char* fileName)$/;"	f
saveOneXva	../commSrc/mdarray_DPT.c	/^void saveOneXva(char* fileName)$/;"	f
saveOneXva	../commSrc/mdarray_PT.c	/^void saveOneXva(char* fileName)$/;"	f
saveScaledCoord	../commSrc/mdarray_DPT.c	/^void saveScaledCoord(char* fileName)$/;"	f
saveSteps	../commSrc/mdsimdep.h	/^  MDINT saveSteps; \/* save between two tape savings *\/$/;"	m	struct:xvaHead
saveSteps	../commSrc/mdsimdep.h	/^  MDINT saveSteps;$/;"	m	struct:measHead
saveSteps	ellipsoid.h	/^  MDINT saveSteps; \/* save between two tape savings *\/$/;"	m	struct:xvaHead
saveSteps	ellipsoid.h	/^  MDINT saveSteps;$/;"	m	struct:measHead
saveVH	xvautil.c	/^void saveVH(char *fileName, COORD_TYPE** vh)$/;"	f
saveXva	../commSrc/mdarray.c	/^void saveXva(int* times, int tapeTimes)$/;"	f
saveXva	../commSrc/mdarrayMIX.c	/^void saveXva(int* times, int tapeTimes)$/;"	f
saveXva	../commSrc/mdarrayMLMC.c	/^void saveXva(int* times, int tapeTimes)$/;"	f
saveXva	../commSrc/mdarray_DPT.c	/^void saveXva(int* times, int tapeTimes)$/;"	f
saveXva	../commSrc/mdarray_PT.c	/^void saveXva(int* times, int tapeTimes)$/;"	f
save_rho	move.c	/^void save_rho(void)$/;"	f
save_rzcm	move.c	/^void save_rzcm(void)$/;"	f
savedXva	../commSrc/mdsimdep.h	/^  int savedXva; $/;"	m	struct:progStatus
savedXva	ellipsoid.h	/^  int savedXva; $/;"	m	struct:progStatus
scalCor	move.c	/^void scalCor(int Nm)$/;"	f
scaleVolTime	../commSrc/mdsimdep.h	/^  double scaleVolTime;$/;"	m	struct:progStatus
scaleVolTime	ellipsoid.h	/^  double scaleVolTime;$/;"	m	struct:progStatus
scalevel	../commSrc/mdsimdep.h	/^  int scalevel;$/;"	m	struct:progStatus
scalevel	ellipsoid.h	/^  int scalevel;$/;"	m	struct:progStatus
scalevels	move.c	/^void scalevels(double temp, double K)$/;"	f
scalevels	move.c	/^void scalevels(double temp, double K, double Vz)$/;"	f
scanFile	../commSrc/mdinit.c	/^void scanFile(char* argom)$/;"	f
scanFile	../commSrc/mdinitMLMC.c	/^void scanFile(char* argom)$/;"	f
scanFile	../commSrc/mdinit_DPT.c	/^void scanFile(char* argom)$/;"	f
scanFile	../commSrc/mdinit_PT.c	/^void scanFile(char* argom)$/;"	f
sepStr	../commSrc/mdarray.c	/^const char sepStr[] = "@@@\\n";$/;"	v
sepStr	../commSrc/mdarrayMIX.c	/^const char sepStr[] = "@@@\\n";$/;"	v
sepStr	../commSrc/mdarrayMLMC.c	/^const char sepStr[] = "@@@\\n";$/;"	v
sepStr	../commSrc/mdarray_DPT.c	/^const char sepStr[] = "@@@\\n";$/;"	v
sepStr	../commSrc/mdarray_PT.c	/^const char sepStr[] = "@@@\\n";$/;"	v
setFlags	../commSrc/calcEta.c	/^void setFlags(void)$/;"	f
setFlags	xvautil.c	/^void setFlags(void)$/;"	f
setToZero	../commSrc/mdarray.c	/^void setToZero(COORD_TYPE* ptr, ...)$/;"	f
setToZero	../commSrc/mdarrayMIX.c	/^void setToZero(int parnum, CORTYPE* ptr, ...)$/;"	f
setToZero	../commSrc/mdarrayMLMC.c	/^void setToZero(int parnum, CORTYPE* ptr, ...)$/;"	f
setToZero	../commSrc/mdarray_DPT.c	/^void setToZero(COORD_TYPE* ptr, ...)$/;"	f
setToZero	../commSrc/mdarray_PT.c	/^void setToZero(COORD_TYPE** ptr, ...)$/;"	f
setToZeroPoly	../commSrc/mdarray.c	/^void setToZeroPoly(COORD_TYPE** ptr, ...)$/;"	f
simStat	../commSrc/mdsimul.h	/^struct simStat$/;"	s
singlePar	../commSrc/mdsimul.h	/^struct singlePar $/;"	s
size	../commSrc/mdsimdep.h	/^  int size ;     \/* size of each xva savings = $/;"	m	struct:xvaHead
size	../commSrc/mdsimdep.h	/^  int size;  \/* size in bytes of each measure *\/$/;"	m	struct:measHead
size	../commSrc/mdsimul.h	/^  int size;     \/* size of the buffer    *\/$/;"	m	struct:measure
size	ellipsoid.h	/^  int size ;     \/* size of each xva savings = $/;"	m	struct:xvaHead
size	ellipsoid.h	/^  int size;  \/* size in bytes of each measure *\/$/;"	m	struct:measHead
sqrtdr2	../commSrc/mdsimdep.h	/^  sqrtdr2, Aa, V, DrSqTot, temp_transl;$/;"	v
sqrtdr2	ellipsoid.h	/^  sqrtdr2, Aa, V, DrSqTot, temp_transl;$/;"	v
staSteps	../commSrc/mdsimdep.h	/^  MDINT staSteps;     \/* steps after which must save sim_stat structure $/;"	m	struct:progStatus
staSteps	ellipsoid.h	/^  MDINT staSteps;     \/* steps after which must save sim_stat structure $/;"	m	struct:progStatus
status	../commSrc/mdio.c	/^MPI_Status status;$/;"	v
status	../commSrc/mdio_DPT.c	/^MPI_Status status;$/;"	v
stepsStack	../commSrc/mdarray.c	/^int  stepsStack; $/;"	v
stepsStack	../commSrc/mdarray.c	/^long long int stepsStack;$/;"	v
stepsStack	../commSrc/mdarrayMIX.c	/^int  stepsStack; $/;"	v
stepsStack	../commSrc/mdarrayMLMC.c	/^int  stepsStack; $/;"	v
stepsStack	../commSrc/mdarray_DPT.c	/^int  stepsStack; $/;"	v
stepsStack	../commSrc/mdarray_PT.c	/^int  stepsStack; $/;"	v
storerate	../commSrc/mdsimdep.h	/^  double storerate;$/;"	m	struct:progStatus
storerate	ellipsoid.h	/^  double storerate;$/;"	m	struct:progStatus
structFacts	measures.c	/^void structFacts(void)$/;"	f
structFacts_OLD	measures.c	/^void structFacts_OLD(void)$/;"	f
sum	../commSrc/md2ascii.c	/^char* sum(char *str, ...)$/;"	f
sum	../commSrc/md2ascii_DPT.c	/^char* sum(char *str, ...)$/;"	f
sum	../commSrc/md2ascii_PT.c	/^char* sum(char *str, ...)$/;"	f
sum	../commSrc/mdutil.c	/^char* sum(char *str, ...)$/;"	f
sumEta	../commSrc/mdsimdep.h	/^  COORD_TYPE sumEta; \/* accumulators for obtaining the mean value of eta *\/$/;"	m	struct:progStatus
sumEta	ellipsoid.h	/^  COORD_TYPE sumEta; \/* accumulators for obtaining the mean value of eta *\/$/;"	m	struct:progStatus
sumPress	../commSrc/mdsimdep.h	/^  COORD_TYPE sumPress;$/;"	m	struct:progStatus
sumPress	ellipsoid.h	/^  COORD_TYPE sumPress;$/;"	m	struct:progStatus
sumS	../commSrc/mdsimdep.h	/^  COORD_TYPE sumS[NUMK];$/;"	m	struct:progStatus
sumS	ellipsoid.h	/^  COORD_TYPE sumS[NUMK];$/;"	m	struct:progStatus
sumTemp	../commSrc/mdsimdep.h	/^  COORD_TYPE sumTemp;$/;"	m	struct:progStatus
sumTemp	ellipsoid.h	/^  COORD_TYPE sumTemp;$/;"	m	struct:progStatus
sw	../commSrc/mdutil.c	/^unsigned char sw(unsigned char onOff)$/;"	f
tBeg	../commSrc/calcEta.h	/^int tCor, printEvery, tBeg, tRun; $/;"	v
tBeg	../commSrc/xva2ascii.h	/^int tTot, printEvery, tBeg = 0, tgap, numParts, np[MP]; $/;"	v
tBeg	xvautil.h	/^int tCor, printEvery, nTeta, tBeg, Gsnr, base, NN, xvaSaveMode = 0; $/;"	v
tBool	corutil.c	/^int SEGSIZE, corBool = 0, tBool = 0, ihdr = 1, ohdr = 1, posBool = 0, Nm,$/;"	v
tCor	../commSrc/calcEta.h	/^int tCor, printEvery, tBeg, tRun; $/;"	v
tCor	xvautil.h	/^int tCor, printEvery, nTeta, tBeg, Gsnr, base, NN, xvaSaveMode = 0; $/;"	v
tRun	../commSrc/calcEta.h	/^int tCor, printEvery, tBeg, tRun; $/;"	v
tTot	../commSrc/xva2ascii.h	/^int tTot, printEvery, tBeg = 0, tgap, numParts, np[MP]; $/;"	v
tapampl	../commSrc/mdsimdep.h	/^  int tapampl;$/;"	m	struct:progStatus
tapampl	ellipsoid.h	/^  int tapampl;$/;"	m	struct:progStatus
tapeTimes	../commSrc/mdsimdep.h	/^  int tapeTimes;    \/* every 'tapeTimes * Omeasure[].saveSteps' $/;"	m	struct:progStatus
tapeTimes	ellipsoid.h	/^  int tapeTimes;    \/* every 'tapeTimes * Omeasure[].saveSteps' $/;"	m	struct:progStatus
taptau	../commSrc/mdsimdep.h	/^  double taptau;$/;"	m	struct:progStatus
taptau	ellipsoid.h	/^  double taptau;$/;"	m	struct:progStatus
tc	../commSrc/mdsimdep.h	/^  double tc;$/;"	m	struct:progStatus
tc	ellipsoid.h	/^  double tc;$/;"	m	struct:progStatus
temp	../commSrc/mdsimdep.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
temp	ellipsoid.h	/^COORD_TYPE E, Dtrans, temp, S[NUMK], dummy, eta, gr[MAXBIN], invs, press,$/;"	v
tempStr	../commSrc/xva2ascii.h	/^char tempStr[1024]; \/* Stringa che contiene una lista di temperature separate$/;"	v
temp_transl	../commSrc/mdsimdep.h	/^  sqrtdr2, Aa, V, DrSqTot, temp_transl;$/;"	v
temp_transl	ellipsoid.h	/^  sqrtdr2, Aa, V, DrSqTot, temp_transl;$/;"	v
temperat	measures.c	/^void temperat(void)$/;"	f
tgap	../commSrc/calcEta.h	/^int tgap; \/* Increment of t0 *\/$/;"	v
tgap	../commSrc/xva2ascii.h	/^int tTot, printEvery, tBeg = 0, tgap, numParts, np[MP]; $/;"	v
tgap	xvautil.h	/^int tgap; \/* Increment of t0 *\/$/;"	v
timbig	move.c	/^const double timbig = 1E12;$/;"	v
time	../commSrc/mdsimdep.h	/^  double time;$/;"	m	struct:params
time	ellipsoid.h	/^  double time;$/;"	m	struct:params
tmpPath	../commSrc/mdsimdep.h	/^  char tmpPath[NAME_LENGTH];$/;"	m	struct:progStatus
tmpPath	ellipsoid.h	/^  char tmpPath[NAME_LENGTH];$/;"	m	struct:progStatus
tol	../commSrc/mdsimdep.h	/^  COORD_TYPE tol;               \/* Tolerance of the shake algoritm used $/;"	m	struct:params
tol	ellipsoid.h	/^  COORD_TYPE tol;               \/* Tolerance of the shake algoritm used $/;"	m	struct:params
tolT	../commSrc/mdsimdep.h	/^  COORD_TYPE tolT;$/;"	m	struct:progStatus
tolT	ellipsoid.h	/^  COORD_TYPE tolT;$/;"	m	struct:progStatus
totStep	../commSrc/mdsimdep.h	/^  MDINT totStep;	\/* temporal step number that simulation $/;"	m	struct:params
totStep	ellipsoid.h	/^  MDINT totStep;	\/* temporal step number that simulation $/;"	m	struct:params
totTime	../commSrc/mdsimul.h	/^  time_t totTime;		\/* total simulation time$/;"	m	struct:simStat
transDiff	measures.c	/^void transDiff(void)$/;"	f
tree	init.c	/^  int **tree, *inCell[3], *cellList, cellsx, cellsy, cellsz, cellRange[2*NDIM];$/;"	v
tree	move.c	/^int *inCell[3], **tree, *cellList, cellRange[2*NDIM], $/;"	v
treeCircAL	../commSrc/mdsimdep.h	166;"	d
treeCircAL	ellipsoid.h	166;"	d
treeCircAL	tree.c	21;"	d	file:
treeCircAR	../commSrc/mdsimdep.h	168;"	d
treeCircAR	ellipsoid.h	168;"	d
treeCircAR	tree.c	23;"	d	file:
treeCircBL	../commSrc/mdsimdep.h	167;"	d
treeCircBL	ellipsoid.h	167;"	d
treeCircBL	tree.c	22;"	d	file:
treeCircBR	../commSrc/mdsimdep.h	169;"	d
treeCircBR	ellipsoid.h	169;"	d
treeCircBR	tree.c	24;"	d	file:
treeIdA	../commSrc/mdsimdep.h	170;"	d
treeIdA	ellipsoid.h	170;"	d
treeIdA	tree.c	25;"	d	file:
treeIdB	../commSrc/mdsimdep.h	171;"	d
treeIdB	ellipsoid.h	171;"	d
treeIdB	tree.c	26;"	d	file:
treeIdC	../commSrc/mdsimdep.h	172;"	d
treeIdC	ellipsoid.h	172;"	d
treeLeft	../commSrc/mdsimdep.h	163;"	d
treeLeft	ellipsoid.h	163;"	d
treeLeft	tree.c	18;"	d	file:
treeRight	../commSrc/mdsimdep.h	164;"	d
treeRight	ellipsoid.h	164;"	d
treeRight	tree.c	19;"	d	file:
treeTime	init.c	/^  double *atomTime, *treeTime;$/;"	v
treeUp	../commSrc/mdsimdep.h	165;"	d
treeUp	ellipsoid.h	165;"	d
treeUp	tree.c	20;"	d	file:
treetime	move.c	/^double *treetime, *atomTime;$/;"	v
type	../commSrc/md2ascii.c	/^char type[128];              \/* type of input measure: this determines also $/;"	v
type	../commSrc/md2ascii_DPT.c	/^char type[128];              \/* type of input measure: this determines also $/;"	v
type	../commSrc/md2ascii_PT.c	/^char type[128];              \/* type of input measure: this determines also $/;"	v
type	../commSrc/mdsimul.h	/^  char type[32];$/;"	m	struct:pascii
type	../commSrc/mdsimul.h	/^  char* type;        $/;"	m	struct:convStruct
type	../commSrc/mdsimul.h	/^  unsigned char type; \/* see mdsimdep.h for details *\/$/;"	m	struct:singlePar
updateDQ	move.c	/^void updateDQ(COORD_TYPE dt)$/;"	f
updatePE	move.c	/^void updatePE(int Nm)$/;"	f
usrInitAft	init.c	/^void usrInitAft(void)$/;"	f
usrInitBef	init.c	/^void usrInitBef(void)$/;"	f
vanHove	xvautil.h	/^COORD_TYPE **vanHove;$/;"	v
vcid	../commSrc/mdsimul.c	/^static char vcid[] = "$Id: tags,v 1.2 2004-10-27 13:23:44 demichel Exp $";$/;"	v	file:
vcid	../commSrc/mdsimul_PT.c	/^static char vcid[] = "$Id: tags,v 1.2 2004-10-27 13:23:44 demichel Exp $";$/;"	v	file:
vcmx0	../commSrc/mdsimdep.h	/^  COORD_TYPE vcmx0[MAXPAR];$/;"	m	struct:progStatus
vcmx0	ellipsoid.h	/^  COORD_TYPE vcmx0[MAXPAR];$/;"	m	struct:progStatus
vcmy0	../commSrc/mdsimdep.h	/^  COORD_TYPE vcmy0[MAXPAR];$/;"	m	struct:progStatus
vcmy0	ellipsoid.h	/^  COORD_TYPE vcmy0[MAXPAR];$/;"	m	struct:progStatus
vcmz0	../commSrc/mdsimdep.h	/^  COORD_TYPE vcmz0[MAXPAR];$/;"	m	struct:progStatus
vcmz0	ellipsoid.h	/^  COORD_TYPE vcmz0[MAXPAR];$/;"	m	struct:progStatus
vectProd	init.c	/^void vectProd(COORD_TYPE r1x, COORD_TYPE r1y, COORD_TYPE r1z, $/;"	f
vectProd	xvautil.c	/^void vectProd(COORD_TYPE r1x, COORD_TYPE r1y, COORD_TYPE r1z, $/;"	f
velFile	xvautil.h	/^char velFile[128], psi1File[128], psi2File[128], C1File[128], C2File[128], $/;"	v
velFlag	xvautil.h	/^int velFlag=1, psi1Flag=1, psi2Flag=1, vhFlag=1, C1Flag=1, C2Flag=1, C3Flag=1,$/;"	v
velacf	xvautil.h	/^COORD_TYPE *velacf, *psi1acf, *psi2acf, *C1acf, *C2acf, *C3acf, $/;"	v
velsBrown	move.c	/^void velsBrown(double T)$/;"	f
vhFile	xvautil.h	/^  DrFile[128], vhFile[128], ddtdrFile[128], ddtdphiFile[128],$/;"	v
vhFlag	xvautil.h	/^int velFlag=1, psi1Flag=1, psi2Flag=1, vhFlag=1, C1Flag=1, C2Flag=1, C3Flag=1,$/;"	v
vhgap	xvautil.h	/^int vhgap; \/* steps every which save the van Hove function *\/$/;"	v
vztap	../commSrc/mdsimdep.h	/^  double vztap;$/;"	m	struct:progStatus
vztap	ellipsoid.h	/^  double vztap;$/;"	m	struct:progStatus
wSegs	../commSrc/scalProc.c	/^void wSegs(int fdes, int size, void* pointer, ...)$/;"	f
wSegs	../commSrc/scalProc_PT.c	/^void wSegs(int fdes, int size, void* pointer, ...)$/;"	f
wallDiss	../commSrc/mdsimdep.h	/^  double wallDiss;             \/* dissipazione negli urti contro il muro *\/$/;"	m	struct:params
wallDiss	ellipsoid.h	/^  double wallDiss;             \/* dissipazione negli urti contro il muro *\/$/;"	m	struct:params
wallcollCount	../commSrc/mdsimdep.h	/^  int wallcollCount;$/;"	m	struct:progStatus
wallcollCount	ellipsoid.h	/^  int wallcollCount;$/;"	m	struct:progStatus
whichCorrupted	../commSrc/mdchoose.c	/^int whichCorrupted(char* absFileName, int (*readFunc)(int), $/;"	f
whichCorrupted	../commSrc/mdchoose_DPT.c	/^int whichCorrupted(char* absFileName, int (*readFunc)(int), $/;"	f
whichSf	../commSrc/mdsimul.h	/^  bool whichSf;$/;"	m	struct:chkStr
wp	../commSrc/xva2ascii.h	/^char wp[1024];$/;"	v
writeAllCor	init.c	/^void writeAllCor(FILE* fs)$/;"	f
writeAsciiPars	../commSrc/mdarray.c	/^void writeAsciiPars(FILE* fs, struct pascii strutt[])$/;"	f
writeAsciiPars	../commSrc/mdarrayMIX.c	/^void writeAsciiPars(FILE* fs, struct pascii strutt[])$/;"	f
writeAsciiPars	../commSrc/mdarrayMLMC.c	/^void writeAsciiPars(FILE* fs, struct pascii strutt[])$/;"	f
writeAsciiPars	../commSrc/mdarray_DPT.c	/^void writeAsciiPars(FILE* fs, struct pascii strutt[])$/;"	f
writeAsciiPars	../commSrc/mdarray_PT.c	/^void writeAsciiPars(FILE* fs, struct pascii strutt[])$/;"	f
writeFp	../commSrc/md2ascii.c	/^void writeFp(FILE* afs,  MDINT step,  int size)$/;"	f
writeFp	../commSrc/md2ascii_DPT.c	/^void writeFp(FILE* afs,  int step,  int size)$/;"	f
writeFp	../commSrc/md2ascii_PT.c	/^void writeFp(FILE* afs,  int step,  int size)$/;"	f
writeInt	../commSrc/md2ascii.c	/^void writeInt(FILE* afs,  MDINT step,  int size)$/;"	f
writeInt	../commSrc/md2ascii_DPT.c	/^void writeInt(FILE* afs,  int step,  int size)$/;"	f
writeInt	../commSrc/md2ascii_PT.c	/^void writeInt(FILE* afs,  int step,  int size)$/;"	f
writeMB	../commSrc/md2ascii.c	/^void writeMB(FILE* afs, MDINT step, int size)$/;"	f
writeMB	../commSrc/md2ascii_DPT.c	/^void writeMB(FILE* afs, int step, int size)$/;"	f
writeMB	../commSrc/md2ascii_PT.c	/^void writeMB(FILE* afs, int step, int size)$/;"	f
writeOneSegsPT	../commSrc/mdarray_PT.c	/^void writeOneSegsPT(int fdes, char* when, char* errMsg, int mode, int ss, $/;"	f
writePE	../commSrc/md2ascii_DPT.c	/^void writePE(FILE* afs, int step, int size)$/;"	f
writePE	../commSrc/md2ascii_PT.c	/^void writePE(FILE* afs, int step, int size)$/;"	f
writePEij	../commSrc/md2ascii_DPT.c	/^void writePEij(FILE* afs, int step, int size)$/;"	f
writePEij	../commSrc/md2ascii_PT.c	/^void writePEij(FILE* afs, int step, int size)$/;"	f
writeS	../commSrc/md2ascii.c	/^void writeS(FILE*afs, MDINT step, int size)$/;"	f
writeS	../commSrc/md2ascii_DPT.c	/^void writeS(FILE*afs, int step, int size)$/;"	f
writeS	../commSrc/md2ascii_PT.c	/^void writeS(FILE*afs, int step, int size)$/;"	f
writeSegs	../commSrc/mdio.c	/^void writeSegs(int fdes, char* when, char* errMsg, int mode, int size,$/;"	f
writeSegs	../commSrc/mdio_DPT.c	/^void writeSegs(int fdes, char* when, char* errMsg, int mode, int size,$/;"	f
writeSegsPT	../commSrc/mdarray_PT.c	/^void writeSegsPT(int fdes, char* when, char* errMsg, int mode, int PTM, $/;"	f
writeSegsPoly	../commSrc/mdio.c	/^void writeSegsPoly(int fdes, char* when, char* errMsg, int mode, int size,$/;"	f
writeVec	../commSrc/md2ascii.c	/^void writeVec(FILE* afs,  MDINT step,  int size)$/;"	f
writeVec	../commSrc/md2ascii_DPT.c	/^void writeVec(FILE* afs,  int step,  int size)$/;"	f
writeVec	../commSrc/md2ascii_PT.c	/^void writeVec(FILE* afs,  int step,  int size)$/;"	f
writeg	../commSrc/md2ascii.c	/^void writeg(FILE* afs, MDINT step, int size)$/;"	f
writeg	../commSrc/md2ascii_DPT.c	/^void writeg(FILE* afs, int step, int size)$/;"	f
writeg	../commSrc/md2ascii_PT.c	/^void writeg(FILE* afs, int step, int size)$/;"	f
wtd	xvautil.h	/^  *C4acf, *wtd;$/;"	v
wtdFile	xvautil.h	/^  wtdFile[128];$/;"	v
wtdFlag	xvautil.h	/^  GsGsgaussFlag = 1, FselfFlag = 1, wtdFlag = 1;$/;"	v
wtdRmax	xvautil.h	/^COORD_TYPE m0, m1, d, Vol, GsrMax, wtdRmax, kMax;$/;"	v
xvaHead	../commSrc/mdsimdep.h	/^struct xvaHead $/;"	s
xvaHead	ellipsoid.h	/^struct xvaHead $/;"	s
xvaParsing	../commSrc/calcEta.c	/^void xvaParsing(char stringA[NAME_LENGTH], char stringB[NAME_LENGTH])$/;"	f
xvaParsing	../commSrc/xva2ascii.c	/^void xvaParsing(char stringA[NAME_LENGTH], char stringB[NAME_LENGTH])$/;"	f
xvaParsing	xvautil.c	/^void xvaParsing(char stringA[NAME_LENGTH], char stringB[NAME_LENGTH])$/;"	f
xvaSaveMode	../commSrc/mdsimdep.h	/^  int xvaSaveMode;\/* 0 = linear 1 = semilog 2 = bilog (not impl. yet) *\/$/;"	m	struct:progStatus
xvaSaveMode	ellipsoid.h	/^  int xvaSaveMode;\/* 0 = linear 1 = semilog 2 = bilog (not impl. yet) *\/$/;"	m	struct:progStatus
xvaSaveMode	xvautil.h	/^int tCor, printEvery, nTeta, tBeg, Gsnr, base, NN, xvaSaveMode = 0; $/;"	v
xvaSteps	../commSrc/mdsimdep.h	/^  MDINT xvaSteps;     \/* steps between two tape file savings *\/$/;"	m	struct:progStatus
xvaSteps	ellipsoid.h	/^  MDINT xvaSteps;     \/* steps between two tape file savings *\/$/;"	m	struct:progStatus
xvaTimes	../commSrc/mdsimul.c	/^int bakTimes = 0, measureTimes = 0, xvaTimes = 0;$/;"	v
xvaTimes	../commSrc/mdsimul_PT.c	/^int bakTimes = 0, measureTimes = 0, xvaTimes = 0;$/;"	v
xvadt	../commSrc/calcEta.h	/^COORD_TYPE xvadt, dt, T; \/* T = temperature *\/$/;"	v
xvadt	../commSrc/xva2ascii.h	/^COORD_TYPE xvadt;$/;"	v
xvadt	xvautil.h	/^COORD_TYPE Mtot, xvadt, dt, dteta, T; \/* T = temperature *\/$/;"	v
xvafile	../commSrc/mdsimdep.h	/^  char xvafile[NAME_LENGTH]; \/* file containing positions, velocities and $/;"	m	struct:progStatus
xvafile	ellipsoid.h	/^  char xvafile[NAME_LENGTH]; \/* file containing positions, velocities and $/;"	m	struct:progStatus
xvaparsFile	../commSrc/calcEta.h	/^char xvaparsFile[NAME_LENGTH];$/;"	v
xvaparsFile	../commSrc/xva2ascii.h	/^  inputFile[NAME_LENGTH], xvaparsFile[NAME_LENGTH];$/;"	v
xvaparsFile	xvautil.h	/^char inputFile[NAME_LENGTH], xvaparsFile[NAME_LENGTH];$/;"	v
